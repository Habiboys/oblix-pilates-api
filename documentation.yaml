openapi: 3.0.0
info:
  title: Oblix Pilates API
  description: API untuk aplikasi Oblix Pilates - sistem manajemen studio pilates
  version: 1.0.0
  contact:
    name: API Support
    email: support@oblixpilates.com
servers:
  - url: https://api-oblix.metro-software.com/api
    description: Metro Test server
  - url: https://oblix-pilates-api-439190874535.us-central1.run.app/api
    description: Cloud Run Test server
  - url: http://34.101.143.2:3020/api
    description: Testing server
  - url: http://localhost:3000/api
    description: Development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        data:
          type: object
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
    PaginationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data retrieved successfully
        data:
          type: array
        pagination:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 5
            total_items:
              type: integer
              example: 100
            per_page:
              type: integer
              example: 20
            has_next:
              type: boolean
              example: true
            has_prev:
              type: boolean
              example: false
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - admin
            - user
        refresh_token:
          type: string
          nullable: true
    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_code:
          type: string
        username:
          type: string
        full_name:
          type: string
        phone_number:
          type: string
        dob:
          type: string
          format: date
        address:
          type: string
        date_of_join:
          type: string
          format: date
        picture:
          type: string
          nullable: true
        status:
          type: string
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category_name:
          type: string
    Class:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class_name:
          type: string
        color_sign:
          type: string
    Schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          nullable: true
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
          nullable: true
        booking_deadline_hour:
          type: integer
        waitlist_lock_minutes:
          type: integer
        min_signup:
          type: integer
        cancel_buffer_minutes:
          type: integer
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        payment_type:
          type: string
        payment_status:
          type: string
          enum:
            - pending
            - success
            - failed
        transaction_time:
          type: string
          format: date-time
          nullable: true
        settlement_time:
          type: string
          format: date-time
          nullable: true
        midtrans_response:
          type: object
          nullable: true
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        schedule_id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
        session_left:
          type: integer
    MemberPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        total_session:
          type: integer
        used_session:
          type: integer
    Banner:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Blog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
          nullable: true
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FAQ:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Gallery:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Testimonial:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 150
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Trainer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
          nullable: true
        description:
          type: string
        instagram:
          type: string
          nullable: true
        tiktok:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Package:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        price:
          type: number
          format: decimal
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          nullable: true
        reminder_session:
          type: integer
          nullable: true
        membership:
          $ref: '#/components/schemas/PackageMembership'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MembershipPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the membership package
        name:
          type: string
          maxLength: 100
          description: Name of the membership package
        price:
          type: number
          format: decimal
          description: Price of the membership package
        session:
          type: integer
          description: Number of sessions included
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Category ID
            name:
              type: string
              description: Category name
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - session
        - category
        - duration_value
        - duration_unit
    TrialPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the trial package
        name:
          type: string
          maxLength: 100
          description: Name of the trial package
        price:
          type: number
          format: decimal
          description: Price of the trial package
        session:
          type: integer
          description: Number of sessions included
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Category ID
            name:
              type: string
              description: Category name
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - session
        - category
        - duration_value
        - duration_unit
    PromoPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the promo package
        name:
          type: string
          maxLength: 100
          description: Name of the promo package
        price:
          type: number
          format: decimal
          description: Price of the promo package
        session:
          type: integer
          description: Number of sessions included
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Category ID
            name:
              type: string
              description: Category name
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - session
        - category
        - duration_value
        - duration_unit
    BonusPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the bonus package
        name:
          type: string
          maxLength: 100
          description: Name of the bonus package
        price:
          type: number
          format: decimal
          description: Price of the bonus package
        session:
          type: integer
          description: Number of sessions included
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Category ID
            name:
              type: string
              description: Category name
        member:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Member ID
            name:
              type: string
              description: Member name
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - session
        - category
        - member
        - duration_value
        - duration_unit
    Staff:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the staff member
        full_name:
          type: string
          maxLength: 100
          description: Full name of the staff member
        username:
          type: string
          maxLength: 50
          description: Username for login
        email:
          type: string
          format: email
          description: Email address of the staff member
        date_of_birth:
          type: string
          format: date
          description: Date of birth
        phone_number:
          type: string
          maxLength: 20
          description: Phone number
      required:
        - id
        - full_name
        - username
        - email
        - date_of_birth
        - phone_number
    PackageMembership:
      type: object
      properties:
        package_id:
          type: string
          format: uuid
        session:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PaymentNotification:
      type: object
      properties:
        order_id:
          type: string
          description: Order ID dari Midtrans
        transaction_status:
          type: string
          enum:
            - capture
            - settlement
            - pending
            - deny
            - expire
            - cancel
            - refund
            - partial_refund
            - chargeback
            - partial_chargeback
            - authorize
          description: Status transaksi dari Midtrans
        transaction_id:
          type: string
          description: Transaction ID dari Midtrans
        fraud_status:
          type: string
          description: Status fraud check
        payment_type:
          type: string
          description: Tipe pembayaran
        va_numbers:
          type: array
          items:
            type: object
            properties:
              bank:
                type: string
              va_number:
                type: string
        pdf_url:
          type: string
          description: URL untuk invoice PDF
    PaymentResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            order_id:
              type: string
            transaction_status:
              type: string
            payment_status:
              type: string
    CreateOrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order created successfully
        data:
          type: object
          properties:
            order_id:
              type: string
              format: uuid
              description: Order ID
            order_number:
              type: string
              description: Order number
            total_amount:
              type: number
              description: Total amount
            payment_url:
              type: string
              format: uri
              description: Midtrans payment URL
            token:
              type: string
              description: Midtrans token for frontend integration
    GetUserOrdersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Orders retrieved successfully
        data:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            pagination:
              $ref: '#/components/schemas/Pagination'
    GetOrderByIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order retrieved successfully
        data:
          $ref: '#/components/schemas/OrderDetail'
    CheckPaymentStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Payment status retrieved successfully
        data:
          type: object
          properties:
            order_id:
              type: string
              format: uuid
            order_number:
              type: string
            payment_status:
              type: string
              enum:
                - pending
                - paid
                - failed
                - expired
                - cancelled
            midtrans_status:
              type: string
            fraud_status:
              type: string
            amount:
              type: number
            payment_type:
              type: string
            va_numbers:
              type: array
              items:
                type: object
                properties:
                  bank:
                    type: string
                  va_number:
                    type: string
            pdf_url:
              type: string
              format: uri
    CancelOrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order cancelled successfully
    PaymentNotificationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Payment notification processed successfully
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_number:
          type: string
        total_amount:
          type: number
        payment_status:
          type: string
          enum:
            - pending
            - paid
            - failed
            - expired
            - cancelled
        package_name:
          type: string
        package_type:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
        session_count:
          type: integer
        duration_value:
          type: integer
        duration_unit:
          type: string
        created_at:
          type: string
          format: date-time
        package:
          $ref: '#/components/schemas/Package'
    OrderDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_number:
          type: string
        total_amount:
          type: number
        payment_status:
          type: string
          enum:
            - pending
            - paid
            - failed
            - expired
            - cancelled
        payment_method:
          type: string
        midtrans_order_id:
          type: string
        midtrans_payment_type:
          type: string
        midtrans_transaction_id:
          type: string
        midtrans_transaction_status:
          type: string
        midtrans_fraud_status:
          type: string
        midtrans_va_numbers:
          type: array
          items:
            type: object
            properties:
              bank:
                type: string
              va_number:
                type: string
        midtrans_pdf_url:
          type: string
          format: uri
        midtrans_redirect_url:
          type: string
          format: uri
        paid_at:
          type: string
          format: date-time
        expired_at:
          type: string
          format: date-time
        notes:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        package_name:
          type: string
        package_type:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
        session_count:
          type: integer
        duration_value:
          type: integer
        duration_unit:
          type: string
        package:
          $ref: '#/components/schemas/Package'
        member:
          $ref: '#/components/schemas/Member'
        member_package:
          $ref: '#/components/schemas/MemberPackage'
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
    GroupSchedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Schedule ID
        class_id:
          type: string
          format: uuid
          description: Class ID
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
        pax:
          type: integer
          description: Maximum number of participants
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
          description: Schedule type
        date_start:
          type: string
          format: date
          description: Start date
        time_start:
          type: string
          description: Start time
        time_end:
          type: string
          description: End time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type
        schedule_until:
          type: string
          format: date
          nullable: true
          description: End date for repeated schedules
        booking_deadline_hour:
          type: integer
          description: Hours before class starts that students must book by
        waitlist_lock_minutes:
          type: integer
          description: Minutes before class start to auto-add waitlisted students
        min_signup:
          type: integer
          description: Minimum number of students required for class to run
        cancel_buffer_minutes:
          type: integer
          description: Minutes before class to auto-cancel if minimum not met
        picture:
          type: string
          nullable: true
          description: Schedule picture filename
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        Class:
          $ref: '#/components/schemas/Class'
        Trainer:
          $ref: '#/components/schemas/Trainer'
    PrivateSchedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Schedule ID
        class_id:
          type: string
          format: uuid
          description: Class ID
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
        member_id:
          type: string
          format: uuid
          description: Assigned member ID
        pax:
          type: integer
          description: Maximum number of participants (always 1 for private)
        type:
          type: string
          enum:
            - private
          description: Schedule type
        date_start:
          type: string
          format: date
          description: Start date
        time_start:
          type: string
          description: Start time
        time_end:
          type: string
          description: End time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type
        schedule_until:
          type: string
          format: date
          nullable: true
          description: End date for repeated schedules
        booking_deadline_hour:
          type: integer
          description: Hours before class starts that students must book by
        waitlist_lock_minutes:
          type: integer
          description: Minutes before class start to auto-add waitlisted students
        min_signup:
          type: integer
          description: Minimum number of students required for class to run
        cancel_buffer_minutes:
          type: integer
          description: Minutes before class to auto-cancel if minimum not met
        picture:
          type: string
          nullable: true
          description: Schedule picture filename
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        Class:
          $ref: '#/components/schemas/Class'
        Trainer:
          $ref: '#/components/schemas/Trainer'
        assignedMember:
          $ref: '#/components/schemas/Member'
    RegisterRequest:
      type: object
      required:
        - full_name
        - username
        - email
        - dob
        - phone_number
        - password
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        dob:
          type: string
          format: date
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        password:
          type: string
          minLength: 6
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@oblix.com
        password:
          type: string
          example: admin123
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 6
    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    CreateBannerRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateBannerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateBlogRequest:
      type: object
      required:
        - title
        - content
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 10000
        picture:
          type: string
          format: binary
          description: Blog picture (JPG, PNG, GIF, WebP, max 5MB) - Will be converted to WebP format
    UpdateBlogRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 10000
        picture:
          type: string
          format: binary
          description: Blog picture (JPG, PNG, GIF, WebP, max 5MB) - Will be converted to WebP format - Optional
    CreateFAQRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
    UpdateFAQRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
    CreateGalleryRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateGalleryRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateProfileRequest:
      type: object
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        address:
          type: string
        picture:
          type: string
          format: uri
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 6
    CreateTestimonialRequest:
      type: object
      required:
        - name
        - age
        - content
      properties:
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 120
        content:
          type: string
    UpdateTestimonialRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 120
        content:
          type: string
    CreateTrainerRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateTrainerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateClassRequest:
      type: object
      required:
        - class_name
        - color_sign
      properties:
        class_name:
          type: string
          maxLength: 255
        color_sign:
          type: string
          maxLength: 7
    UpdateClassRequest:
      type: object
      properties:
        class_name:
          type: string
          maxLength: 255
        color_sign:
          type: string
          maxLength: 7
    CreatePackageRequest:
      type: object
      required:
        - name
        - price
        - type
        - duration_value
        - duration_unit
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: number
          minimum: 0
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
          minimum: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 31
        reminder_session:
          type: integer
          minimum: 1
    UpdatePackageRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: number
          minimum: 0
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
          minimum: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 31
        reminder_session:
          type: integer
          minimum: 1
    CreateScheduleRequest:
      type: object
      required:
        - class_id
        - coach_id
        - pax
        - type
        - date_start
        - time_start
        - time_end
        - repeat_type
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          format: uri
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
          minimum: 1
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
        booking_deadline_hour:
          type: integer
          minimum: 0
        waitlist_lock_minutes:
          type: integer
          minimum: 0
        min_signup:
          type: integer
          minimum: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 0
    UpdateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          format: uri
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
          minimum: 1
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
        booking_deadline_hour:
          type: integer
          minimum: 0
        waitlist_lock_minutes:
          type: integer
          minimum: 0
        min_signup:
          type: integer
          minimum: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 0
    CreateBookingRequest:
      type: object
      required:
        - schedule_id
        - package_id
      properties:
        schedule_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
    CreateOrderRequest:
      type: object
      required:
        - package_id
      properties:
        package_id:
          type: string
          format: uuid
          description: ID of the package to purchase
        quantity:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          description: Quantity of packages to purchase
        notes:
          type: string
          maxLength: 500
          description: Additional notes for the order
    PaymentNotificationRequest:
      type: object
      required:
        - transaction_status
        - order_id
      properties:
        transaction_status:
          type: string
          description: Transaction status from Midtrans
        order_id:
          type: string
          description: Order ID from Midtrans
        transaction_id:
          type: string
          description: Transaction ID from Midtrans
        fraud_status:
          type: string
          description: Fraud status from Midtrans
        payment_type:
          type: string
          description: Payment type from Midtrans
        va_numbers:
          type: array
          items:
            type: object
            properties:
              bank:
                type: string
              va_number:
                type: string
        pdf_url:
          type: string
          format: uri
          description: PDF URL from Midtrans
    CreateMembershipPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - session
        - category_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the membership package
          example: Premium Membership 3 Months
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the membership package
          example: 1500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 3
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 12
        category_id:
          type: string
          format: uuid
          description: Category ID for the membership package
          example: 123e4567-e89b-12d3-a456-426614174000
    UpdateMembershipPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the membership package
          example: Premium Membership 3 Months
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the membership package
          example: 1500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 3
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 12
        category_id:
          type: string
          format: uuid
          description: Category ID for the membership package
          example: 123e4567-e89b-12d3-a456-426614174000
    CreateTrialPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - session
        - category_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the trial package
          example: 10 Session Group
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the trial package
          example: 630000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 10
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: week
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 10
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 10
        category_id:
          type: string
          format: uuid
          description: Category ID for the trial package
          example: 123e4567-e89b-12d3-a456-426614174000
    UpdateTrialPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the trial package
          example: 10 Session Group
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the trial package
          example: 630000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 10
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: week
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 10
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 10
        category_id:
          type: string
          format: uuid
          description: Category ID for the trial package
          example: 123e4567-e89b-12d3-a456-426614174000
    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the category
          example: Group
        description:
          type: string
          maxLength: 500
          description: Description of the category (optional)
          example: Group session category
    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the category
          example: Group
        description:
          type: string
          maxLength: 500
          description: Description of the category (optional)
          example: Group session category
    CreatePromoPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - session
        - category_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the promo package
          example: Summer Promo Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the promo package
          example: 500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 2
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 8
        category_id:
          type: string
          format: uuid
          description: Category ID for the promo package
          example: 123e4567-e89b-12d3-a456-426614174000
    UpdatePromoPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the promo package
          example: Summer Promo Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the promo package
          example: 500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 2
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 8
        category_id:
          type: string
          format: uuid
          description: Category ID for the promo package
          example: 123e4567-e89b-12d3-a456-426614174000
    CreateBonusPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - session
        - category_id
        - member_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the bonus package
          example: Bonus Session Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the bonus package
          example: 200000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 5
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 1
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 3
        category_id:
          type: string
          format: uuid
          description: Category ID for the bonus package
          example: 123e4567-e89b-12d3-a456-426614174000
        member_id:
          type: string
          format: uuid
          description: Member ID for the bonus package
          example: 123e4567-e89b-12d3-a456-426614174001
    UpdateBonusPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the bonus package
          example: Bonus Session Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the bonus package
          example: 200000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 5
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 1
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 3
        category_id:
          type: string
          format: uuid
          description: Category ID for the bonus package
          example: 123e4567-e89b-12d3-a456-426614174000
        member_id:
          type: string
          format: uuid
          description: Member ID for the bonus package
          example: 123e4567-e89b-12d3-a456-426614174001
    CreateStaffRequest:
      type: object
      required:
        - full_name
        - username
        - email
        - date_of_birth
        - phone_number
        - password
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          description: Full name of the staff member
          example: John Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9_]+$
          description: Username for login (letters, numbers, underscores only)
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the staff member
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          description: Date of birth (YYYY-MM-DD)
          example: '1990-01-15'
        phone_number:
          type: string
          pattern: ^[0-9+\\-\\s()]+$
          minLength: 10
          maxLength: 20
          description: Phone number
          example: +62 812-3456-7890
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Password for login
          example: password123
    UpdateStaffRequest:
      type: object
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          description: Full name of the staff member
          example: John Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9_]+$
          description: Username for login (letters, numbers, underscores only)
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the staff member
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          description: Date of birth (YYYY-MM-DD)
          example: '1990-01-15'
        phone_number:
          type: string
          pattern: ^[0-9+\\-\\s()]+$
          minLength: 10
          maxLength: 20
          description: Phone number
          example: +62 812-3456-7890
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Password for login (optional for updates)
          example: newpassword123
    CreateGroupScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - pax
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 123e4567-e89b-12d3-a456-426614174000
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 123e4567-e89b-12d3-a456-426614174001
        pax:
          type: integer
          minimum: 1
          maximum: 50
          description: Maximum number of participants
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-17'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '07:10'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '08:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-17'
        booking_deadline_hour:
          type: integer
          minimum: 0
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 6
        cancel_buffer_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateGroupScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 123e4567-e89b-12d3-a456-426614174000
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 123e4567-e89b-12d3-a456-426614174001
        pax:
          type: integer
          minimum: 1
          maximum: 50
          description: Maximum number of participants
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-17'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '07:10'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '08:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: weekly
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-17'
        booking_deadline_hour:
          type: integer
          minimum: 0
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 6
        cancel_buffer_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateSemiPrivateScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - pax
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        pax:
          type: integer
          minimum: 1
          maximum: 20
          description: Maximum number of participants (max 20 for semi-private)
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '10:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '11:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 3
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateSemiPrivateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        pax:
          type: integer
          minimum: 1
          maximum: 20
          description: Maximum number of participants (max 20 for semi-private)
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '10:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '11:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: none
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 3
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreatePrivateScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - member_id
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        member_id:
          type: string
          format: uuid
          description: Member ID to be assigned (auto booking)
          example: 880e8400-e29b-41d4-a716-446655440001
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '14:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '15:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          maximum: 2
          description: Minimum number of students required for class to run (max 2 for private)
          example: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdatePrivateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        member_id:
          type: string
          format: uuid
          description: Member ID to be assigned (auto booking)
          example: 880e8400-e29b-41d4-a716-446655440001
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '14:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '15:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: none
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          maximum: 2
          description: Minimum number of students required for class to run (max 2 for private)
          example: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user and create member profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                          email:
                            type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset link to user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user and invalidate tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /banner:
    get:
      tags:
        - Content Management
      summary: Get all banners
      description: Retrieve all banners with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Banners retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new banner
      description: Create a new banner (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateBannerRequest'
      responses:
        '201':
          description: Banner created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /banner/{id}:
    get:
      tags:
        - Content Management
      summary: Get banner by ID
      description: Retrieve a specific banner by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update banner
      description: Update a banner by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateBannerRequest'
      responses:
        '200':
          description: Banner updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete banner
      description: Delete a banner by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blog:
    get:
      tags:
        - Content Management
      summary: Get all blogs
      description: Retrieve all blogs with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Blogs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new blog
      description: Create a new blog (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
      responses:
        '201':
          description: Blog created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blog/{id}:
    get:
      tags:
        - Content Management
      summary: Get blog by ID
      description: Retrieve a specific blog by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      responses:
        '200':
          description: Blog retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update blog
      description: Update a blog by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
      responses:
        '200':
          description: Blog updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete blog
      description: Delete a blog by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      responses:
        '200':
          description: Blog deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /faq:
    get:
      tags:
        - Content Management
      summary: Get all FAQs
      description: Retrieve all FAQs with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new FAQ
      description: Create a new FAQ (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFAQRequest'
      responses:
        '201':
          description: FAQ created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /faq/{id}:
    get:
      tags:
        - Content Management
      summary: Get FAQ by ID
      description: Retrieve a specific FAQ by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update FAQ
      description: Update a FAQ by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFAQRequest'
      responses:
        '200':
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete FAQ
      description: Delete a FAQ by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gallery:
    get:
      tags:
        - Content Management
      summary: Get all galleries
      description: Retrieve all galleries with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Galleries retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new gallery
      description: Create a new gallery (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGalleryRequest'
      responses:
        '201':
          description: Gallery created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gallery/{id}:
    get:
      tags:
        - Content Management
      summary: Get gallery by ID
      description: Retrieve a specific gallery by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update gallery
      description: Update a gallery by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateGalleryRequest'
      responses:
        '200':
          description: Gallery updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete gallery
      description: Delete a gallery by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /testimonial:
    get:
      tags:
        - Content Management
      summary: Get all testimonials
      description: Retrieve all testimonials with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Testimonials retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new testimonial
      description: Create a new testimonial (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestimonialRequest'
      responses:
        '201':
          description: Testimonial created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /testimonial/{id}:
    get:
      tags:
        - Content Management
      summary: Get testimonial by ID
      description: Retrieve a specific testimonial by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update testimonial
      description: Update a testimonial by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestimonialRequest'
      responses:
        '200':
          description: Testimonial updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete testimonial
      description: Delete a testimonial by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile:
    get:
      tags:
        - Profile Management
      summary: Get user profile
      description: Retrieve current user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Profile Management
      summary: Update user profile
      description: Update current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  minLength: 3
                  maxLength: 150
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 15
                dob:
                  type: string
                  format: date
                address:
                  type: string
                  maxLength: 500
                picture:
                  type: string
                  format: binary
                  description: Profile photo (JPG, PNG, GIF, WebP, max 5MB)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile/change-password:
    put:
      tags:
        - Profile Management
      summary: Change password
      description: Change current user's password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile/profile-photo:
    delete:
      tags:
        - Profile Management
      summary: Delete profile photo
      description: Remove user's profile photo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile photo deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer:
    get:
      tags:
        - Trainer Management
      summary: Get all trainers
      description: Retrieve all trainers with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Trainers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Trainer Management
      summary: Create new trainer
      description: Create a new trainer (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTrainerRequest'
      responses:
        '201':
          description: Trainer created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer/{id}:
    get:
      tags:
        - Trainer Management
      summary: Get trainer by ID
      description: Retrieve a specific trainer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Trainer Management
      summary: Update trainer
      description: Update a trainer by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTrainerRequest'
      responses:
        '200':
          description: Trainer updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Trainer Management
      summary: Delete trainer
      description: Delete a trainer by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer/{id}/picture:
    delete:
      tags:
        - Trainer Management
      summary: Delete trainer picture
      description: Delete trainer's picture only (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer picture deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package:
    get:
      tags:
        - Membership Package Management
      summary: Get all membership packages
      description: Retrieve all membership packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Membership packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/MembershipPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Membership Package Management
      summary: Create new membership package
      description: Create a new membership package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMembershipPackageRequest'
      responses:
        '201':
          description: Membership package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package/{id}:
    get:
      tags:
        - Membership Package Management
      summary: Get membership package by ID
      description: Retrieve a specific membership package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      responses:
        '200':
          description: Membership package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Membership Package Management
      summary: Update membership package
      description: Update an existing membership package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMembershipPackageRequest'
      responses:
        '200':
          description: Membership package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Membership Package Management
      summary: Delete membership package
      description: Delete an existing membership package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      responses:
        '200':
          description: Membership package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package/categories/list:
    get:
      tags:
        - Membership Package Management
      summary: Get categories for membership package
      description: Retrieve all categories for membership package creation/update (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trial-package:
    get:
      tags:
        - Trial Package Management
      summary: Get all trial packages
      description: Retrieve all trial packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Trial packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/TrialPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Trial Package Management
      summary: Create new trial package
      description: Create a new trial package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrialPackageRequest'
      responses:
        '201':
          description: Trial package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trial-package/{id}:
    get:
      tags:
        - Trial Package Management
      summary: Get trial package by ID
      description: Retrieve a specific trial package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      responses:
        '200':
          description: Trial package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Trial Package Management
      summary: Update trial package
      description: Update an existing trial package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrialPackageRequest'
      responses:
        '200':
          description: Trial package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Trial Package Management
      summary: Delete trial package
      description: Delete an existing trial package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      responses:
        '200':
          description: Trial package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /promo-package:
    get:
      tags:
        - Promo Package Management
      summary: Get all promo packages
      description: Retrieve all promo packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Promo packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/PromoPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Promo Package Management
      summary: Create new promo package
      description: Create a new promo package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePromoPackageRequest'
      responses:
        '201':
          description: Promo package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /promo-package/{id}:
    get:
      tags:
        - Promo Package Management
      summary: Get promo package by ID
      description: Retrieve a specific promo package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      responses:
        '200':
          description: Promo package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Promo Package Management
      summary: Update promo package
      description: Update an existing promo package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePromoPackageRequest'
      responses:
        '200':
          description: Promo package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Promo Package Management
      summary: Delete promo package
      description: Delete an existing promo package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      responses:
        '200':
          description: Promo package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package:
    get:
      tags:
        - Bonus Package Management
      summary: Get all bonus packages
      description: Retrieve all bonus packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Bonus packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/BonusPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Bonus Package Management
      summary: Create new bonus package
      description: Create a new bonus package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBonusPackageRequest'
      responses:
        '201':
          description: Bonus package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BonusPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package/members/search:
    get:
      tags:
        - Bonus Package Management
      summary: Search members for bonus package
      description: Search members by name for bonus package assignment
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for member name
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Member'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package/{id}:
    get:
      tags:
        - Bonus Package Management
      summary: Get bonus package by ID
      description: Retrieve a specific bonus package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      responses:
        '200':
          description: Bonus package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BonusPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Bonus Package Management
      summary: Update bonus package
      description: Update an existing bonus package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBonusPackageRequest'
      responses:
        '200':
          description: Bonus package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BonusPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Bonus Package Management
      summary: Delete bonus package
      description: Delete an existing bonus package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      responses:
        '200':
          description: Bonus package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /staff:
    get:
      tags:
        - Staff Management
      summary: Get all staff
      description: Retrieve all staff members with pagination and search functionality (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for staff name, username, or email
      responses:
        '200':
          description: Staff retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          staff:
                            type: array
                            items:
                              $ref: '#/components/schemas/Staff'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Staff Management
      summary: Create new staff
      description: Create a new staff member (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStaffRequest'
      responses:
        '201':
          description: Staff created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Validation error or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /staff/{id}:
    get:
      tags:
        - Staff Management
      summary: Get staff by ID
      description: Retrieve a specific staff member by their ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      responses:
        '200':
          description: Staff retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Invalid staff ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Staff Management
      summary: Update staff
      description: Update an existing staff member (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStaffRequest'
      responses:
        '200':
          description: Staff updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Validation error, invalid ID format, or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Staff Management
      summary: Delete staff
      description: Delete an existing staff member (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      responses:
        '200':
          description: Staff deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid staff ID format or cannot delete the only admin user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category:
    get:
      tags:
        - Category Management
      summary: Get all categories
      description: Retrieve all categories with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for category name
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/Category'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Category Management
      summary: Create new category
      description: Create a new category (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Validation error or category with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category/{id}:
    get:
      tags:
        - Category Management
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Invalid category ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Category Management
      summary: Update category
      description: Update an existing category (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Validation error, invalid ID format, or category with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Category Management
      summary: Delete category
      description: Delete an existing category (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid category ID format or category is being used in packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/create:
    post:
      tags:
        - Order Management
      summary: Create new order
      description: Create a new order for package purchase with Midtrans integration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/my-orders:
    get:
      tags:
        - Order Management
      summary: Get user orders
      description: Retrieve paginated list of user's orders
      security:
        - bearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by payment status
          required: false
          schema:
            type: string
            enum:
              - pending
              - paid
              - failed
              - expired
              - cancelled
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOrdersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{id}:
    get:
      tags:
        - Order Management
      summary: Get order by ID
      description: Retrieve specific order details
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{order_id}/status:
    get:
      tags:
        - Order Management
      summary: Check payment status
      description: Check payment status from Midtrans and update order
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckPaymentStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{order_id}/cancel:
    delete:
      tags:
        - Order Management
      summary: Cancel order
      description: Cancel pending order and Midtrans transaction
      security:
        - bearerAuth: []
      parameters:
        - name: order_id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrderResponse'
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/notification:
    post:
      tags:
        - Payment
      summary: Payment notification from Midtrans
      description: Endpoint untuk menerima notifikasi pembayaran dari Midtrans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentNotification'
      responses:
        '200':
          description: Notification processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/recurring:
    post:
      tags:
        - Payment
      summary: Recurring payment notification
      description: Endpoint untuk menerima notifikasi pembayaran berulang dari Midtrans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentNotification'
      responses:
        '200':
          description: Recurring notification processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/pay-account:
    post:
      tags:
        - Payment
      summary: Pay Account notification
      description: Endpoint untuk menerima notifikasi status Pay Account dari Midtrans
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentNotification'
      responses:
        '200':
          description: Pay Account notification processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/finish:
    get:
      tags:
        - Payment
      summary: Payment success redirect
      description: Redirect endpoint setelah pembayaran berhasil
      parameters:
        - name: order_id
          in: query
          description: Order ID
          required: false
          schema:
            type: string
        - name: result_code
          in: query
          description: Result code dari Midtrans
          required: false
          schema:
            type: string
        - name: transaction_status
          in: query
          description: Status transaksi
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend success page
          headers:
            Location:
              description: Frontend success URL
              schema:
                type: string
  /order/payment/error:
    get:
      tags:
        - Payment
      summary: Payment error redirect
      description: Redirect endpoint jika terjadi error dalam pembayaran
      parameters:
        - name: order_id
          in: query
          description: Order ID
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend error page
          headers:
            Location:
              description: Frontend error URL
              schema:
                type: string
  /order/payment/pending:
    get:
      tags:
        - Payment
      summary: Payment pending redirect
      description: Redirect endpoint jika pembayaran masih pending
      parameters:
        - name: order_id
          in: query
          description: Order ID
          required: false
          schema:
            type: string
      responses:
        '302':
          description: Redirect to frontend pending page
          headers:
            Location:
              description: Frontend pending URL
              schema:
                type: string
  /schedule/group:
    get:
      tags:
        - Schedule Management
      summary: Get all group schedules
      description: Retrieve all group schedules with pagination and search
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by class name
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD)
      responses:
        '200':
          description: Group schedules retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/GroupSchedule'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new group schedule
      description: Create a new group schedule (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGroupScheduleRequest'
      responses:
        '201':
          description: Group schedule created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedule:
                            $ref: '#/components/schemas/GroupSchedule'
                          totalSchedules:
                            type: integer
                            example: 14
                          repeatType:
                            type: string
                            example: weekly
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/group/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get group schedule by ID
      description: Retrieve a specific group schedule by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Group schedule retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GroupSchedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update group schedule
      description: Update an existing group schedule (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateGroupScheduleRequest'
      responses:
        '200':
          description: Group schedule updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GroupSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete group schedule
      description: Delete a group schedule (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Group schedule deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/semi-private:
    get:
      tags:
        - Schedule Management
      summary: Get all semi-private schedules
      description: Retrieve all semi-private schedules with pagination and search
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search by class name
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Filter by specific date
      responses:
        '200':
          description: Semi-private schedules retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedules retrieved successfully
                  data:
                    type: object
                    properties:
                      schedules:
                        type: array
                        items:
                          $ref: '#/components/schemas/GroupSchedule'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new semi-private schedule
      description: Create a new semi-private schedule (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSemiPrivateScheduleRequest'
      responses:
        '201':
          description: Semi-private schedule created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule created successfully (14 schedules generated)
                  data:
                    type: object
                    properties:
                      schedule:
                        $ref: '#/components/schemas/GroupSchedule'
                      totalSchedules:
                        type: integer
                        example: 14
                      repeatType:
                        type: string
                        example: weekly
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/semi-private/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get semi-private schedule by ID
      description: Retrieve a specific semi-private schedule by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Semi-private schedule retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule retrieved successfully
                  data:
                    $ref: '#/components/schemas/GroupSchedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update semi-private schedule
      description: Update an existing semi-private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateSemiPrivateScheduleRequest'
      responses:
        '200':
          description: Semi-private schedule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule updated successfully
                  data:
                    $ref: '#/components/schemas/GroupSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete semi-private schedule
      description: Delete a semi-private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Semi-private schedule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/private:
    get:
      tags:
        - Schedule Management
      summary: Get all private schedules
      description: Retrieve all private schedules with pagination and search
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page
        - name: search
          in: query
          schema:
            type: string
          description: Search by class name
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Filter by specific date
      responses:
        '200':
          description: Private schedules retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedules retrieved successfully
                  data:
                    type: object
                    properties:
                      schedules:
                        type: array
                        items:
                          $ref: '#/components/schemas/PrivateSchedule'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new private schedule with auto booking
      description: Create a new private schedule with automatic booking for assigned member (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePrivateScheduleRequest'
      responses:
        '201':
          description: Private schedule created successfully with auto booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule created successfully (14 schedules generated)
                  data:
                    type: object
                    properties:
                      schedule:
                        $ref: '#/components/schemas/PrivateSchedule'
                      totalSchedules:
                        type: integer
                        example: 14
                      totalBookings:
                        type: integer
                        example: 14
                      repeatType:
                        type: string
                        example: weekly
                      assignedMember:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          full_name:
                            type: string
                          email:
                            type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/private/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get private schedule by ID
      description: Retrieve a specific private schedule by its ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Private schedule retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule retrieved successfully
                  data:
                    $ref: '#/components/schemas/PrivateSchedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update private schedule
      description: Update an existing private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePrivateScheduleRequest'
      responses:
        '200':
          description: Private schedule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule updated successfully
                  data:
                    $ref: '#/components/schemas/PrivateSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete private schedule
      description: Delete a private schedule and its associated bookings (admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Private schedule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Content Management
    description: Banner, blog, FAQ, gallery, and testimonial management endpoints
  - name: Profile Management
    description: User profile management endpoints
  - name: Trainer Management
    description: Trainer management endpoints
  - name: Membership Package Management
    description: Membership package management endpoints
  - name: Trial Package Management
    description: Trial package management endpoints
  - name: Promo Package Management
    description: Promo package management endpoints
  - name: Bonus Package Management
    description: Bonus package management endpoints
  - name: Staff Management
    description: Staff management endpoints
  - name: Category Management
    description: Category management endpoints
  - name: Order Management
    description: Order and payment management endpoints
  - name: Payment
    description: Payment-related endpoints for Midtrans integration
  - name: Schedule Management
    description: Schedule management endpoints for group, semi-private, and private classes
