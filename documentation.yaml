openapi: 3.0.0
info:
  title: Oblix Pilates API
  description: API untuk aplikasi Oblix Pilates - sistem manajemen studio pilates
  version: 1.0.0
  contact:
    name: API Support
    email: support@oblixpilates.com
servers:
  - url: https://api-oblix.metro-software.com/api
    description: Metro Test server
  - url: https://oblix-pilates-api-439190874535.us-central1.run.app/api
    description: Cloud Run Test server
  - url: http://34.101.143.2:3020/api
    description: Testing server
  - url: http://localhost:3000/api
    description: Development server
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Operation successful
        data:
          type: object
    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: Error message
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string
    PaginationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Data retrieved successfully
        data:
          type: array
        pagination:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 5
            total_items:
              type: integer
              example: 100
            per_page:
              type: integer
              example: 20
            has_next:
              type: boolean
              example: true
            has_prev:
              type: boolean
              example: false
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        role:
          type: string
          enum:
            - admin
            - user
        refresh_token:
          type: string
          nullable: true
    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_code:
          type: string
        username:
          type: string
        full_name:
          type: string
        email:
          type: string
          format: email
        phone_number:
          type: string
        dob:
          type: string
          format: date
        address:
          type: string
        date_of_join:
          type: string
          format: date
        picture:
          type: string
          nullable: true
        status:
          type: string
    Category:
      type: object
      properties:
        id:
          type: string
          format: uuid
        category_name:
          type: string
    Class:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class_name:
          type: string
        color_sign:
          type: string
    Schedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          nullable: true
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
          nullable: true
        booking_deadline_hour:
          type: integer
        waitlist_lock_minutes:
          type: integer
        min_signup:
          type: integer
        cancel_buffer_minutes:
          type: integer
    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        payment_type:
          type: string
        payment_status:
          type: string
          enum:
            - pending
            - success
            - failed
        transaction_time:
          type: string
          format: date-time
          nullable: true
        settlement_time:
          type: string
          format: date-time
          nullable: true
        midtrans_response:
          type: object
          nullable: true
    Booking:
      type: object
      properties:
        id:
          type: string
          format: uuid
        schedule_id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
        session_left:
          type: integer
    MemberPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
        order_id:
          type: string
          format: uuid
        start_date:
          type: string
          format: date
        end_date:
          type: string
          format: date
        total_session:
          type: integer
        used_session:
          type: integer
    Banner:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Blog:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
          nullable: true
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    FAQ:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Gallery:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Testimonial:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 150
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Trainer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        picture:
          type: string
          nullable: true
        description:
          type: string
        instagram:
          type: string
          nullable: true
        tiktok:
          type: string
          nullable: true
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    Package:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          maxLength: 100
        price:
          type: number
          format: decimal
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          nullable: true
        reminder_session:
          type: integer
          nullable: true
        membership:
          $ref: '#/components/schemas/PackageMembership'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    MembershipPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the membership package
        name:
          type: string
          maxLength: 100
          description: Name of the membership package
        price:
          type: number
          format: decimal
          description: Price of the membership package
        session:
          type: integer
          description: Number of sessions included
        category:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: Category ID
            name:
              type: string
              description: Category name
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - session
        - category
        - duration_value
        - duration_unit
    TrialPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the trial package
        name:
          type: string
          maxLength: 100
          description: Name of the trial package
        price:
          type: number
          format: decimal
          description: Price of the trial package
        group_session:
          type: integer
          description: Group session
        private_session:
          type: integer
          description: Private session
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - group_session
        - private_session
        - duration_value
        - duration_unit
    PromoPackage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the promo package
        name:
          type: string
          maxLength: 100
          description: Name of the promo package
        price:
          type: number
          format: decimal
          description: Price of the promo package
        group_session:
          type: integer
          description: Group session
        private_session:
          type: integer
          description: Private session
        start_time:
          type: string
          format: date-time
          description: Start time
        end_time:
          type: string
          format: date-time
          description: End time
        duration_value:
          type: integer
          description: Duration value
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
        reminder_day:
          type: integer
          nullable: true
          description: Reminder day
        reminder_session:
          type: integer
          nullable: true
          description: Reminder session
      required:
        - id
        - name
        - price
        - group_session
        - private_session
        - start_time
        - end_time
        - duration_value
        - duration_unit
    BonusPackage:
      type: object
      properties:
        package_id:
          type: string
          format: uuid
          description: Unique identifier for the bonus package
        group_session:
          type: integer
          nullable: true
          description: Number of group sessions included
          example: 5
        private_session:
          type: integer
          nullable: true
          description: Number of private sessions included
          example: 2
        members:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
                description: Member ID
              name:
                type: string
                description: Member full name
              member_code:
                type: string
                description: Member code
        duration_value:
          type: integer
          description: Duration value
          example: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - package_id
        - group_session
        - private_session
        - members
        - duration_value
        - duration_unit
        - created_at
        - updated_at
    Staff:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the staff member
        full_name:
          type: string
          maxLength: 100
          description: Full name of the staff member
        username:
          type: string
          maxLength: 50
          description: Username for login
        email:
          type: string
          format: email
          description: Email address of the staff member
        date_of_birth:
          type: string
          format: date
          description: Date of birth
        phone_number:
          type: string
          maxLength: 20
          description: Phone number
      required:
        - id
        - full_name
        - username
        - email
        - date_of_birth
        - phone_number
    PackageMembership:
      type: object
      properties:
        package_id:
          type: string
          format: uuid
        session:
          type: integer
        category:
          $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    PaymentNotification:
      type: object
      properties:
        order_id:
          type: string
          description: Order ID dari Midtrans
        transaction_status:
          type: string
          enum:
            - capture
            - settlement
            - pending
            - deny
            - expire
            - cancel
            - refund
            - partial_refund
            - chargeback
            - partial_chargeback
            - authorize
          description: Status transaksi dari Midtrans
        transaction_id:
          type: string
          description: Transaction ID dari Midtrans
        fraud_status:
          type: string
          description: Status fraud check
        payment_type:
          type: string
          description: Tipe pembayaran
        va_numbers:
          type: array
          items:
            type: object
            properties:
              bank:
                type: string
              va_number:
                type: string
        pdf_url:
          type: string
          description: URL untuk invoice PDF
    PaymentResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            order_id:
              type: string
            transaction_status:
              type: string
            payment_status:
              type: string
    CreateOrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order created successfully
        data:
          type: object
          properties:
            order_id:
              type: string
              format: uuid
              description: Order ID
            order_number:
              type: string
              description: Order number
            total_amount:
              type: number
              description: Total amount
            payment_url:
              type: string
              format: uri
              description: Midtrans payment URL
            token:
              type: string
              description: Midtrans token for frontend integration
    GetUserOrdersResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Orders retrieved successfully
        data:
          type: object
          properties:
            orders:
              type: array
              items:
                $ref: '#/components/schemas/Order'
            pagination:
              $ref: '#/components/schemas/Pagination'
    GetOrderByIdResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order retrieved successfully
        data:
          $ref: '#/components/schemas/OrderDetail'
    CheckPaymentStatusResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Payment status retrieved successfully
        data:
          type: object
          properties:
            order_id:
              type: string
              format: uuid
            order_number:
              type: string
            payment_status:
              type: string
              enum:
                - pending
                - paid
                - failed
                - expired
                - cancelled
            midtrans_status:
              type: string
            fraud_status:
              type: string
            amount:
              type: number
            payment_type:
              type: string
            va_numbers:
              type: array
              items:
                type: object
                properties:
                  bank:
                    type: string
                  va_number:
                    type: string
            pdf_url:
              type: string
              format: uri
    CancelOrderResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Order cancelled successfully
    PaymentNotificationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Payment notification processed successfully
    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_number:
          type: string
        total_amount:
          type: number
        payment_status:
          type: string
          enum:
            - pending
            - paid
            - failed
            - expired
            - cancelled
        package_name:
          type: string
        package_type:
          type: string
        quantity:
          type: integer
        unit_price:
          type: number
        session_count:
          type: integer
        duration_value:
          type: integer
        duration_unit:
          type: string
        created_at:
          type: string
          format: date-time
        package:
          $ref: '#/components/schemas/Package'
    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalItems:
          type: integer
        itemsPerPage:
          type: integer
    GroupSchedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Schedule ID
        class_id:
          type: string
          format: uuid
          description: Class ID
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
        pax:
          type: integer
          description: Maximum number of participants
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
          description: Schedule type
        date_start:
          type: string
          format: date
          description: Start date
        time_start:
          type: string
          description: Start time
        time_end:
          type: string
          description: End time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type
        schedule_until:
          type: string
          format: date
          nullable: true
          description: End date for repeated schedules
        booking_deadline_hour:
          type: integer
          description: Hours before class starts that students must book by
        waitlist_lock_minutes:
          type: integer
          description: Minutes before class start to auto-add waitlisted students
        min_signup:
          type: integer
          description: Minimum number of students required for class to run
        cancel_buffer_minutes:
          type: integer
          description: Minutes before class to auto-cancel if minimum not met
        picture:
          type: string
          nullable: true
          description: Schedule picture filename
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        Class:
          $ref: '#/components/schemas/Class'
        Trainer:
          $ref: '#/components/schemas/Trainer'
    PrivateSchedule:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Schedule ID
        class_id:
          type: string
          format: uuid
          description: Class ID
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
        member_id:
          type: string
          format: uuid
          description: Assigned member ID
        pax:
          type: integer
          description: Maximum number of participants (always 1 for private)
        type:
          type: string
          enum:
            - private
          description: Schedule type
        date_start:
          type: string
          format: date
          description: Start date
        time_start:
          type: string
          description: Start time
        time_end:
          type: string
          description: End time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type
        schedule_until:
          type: string
          format: date
          nullable: true
          description: End date for repeated schedules
        booking_deadline_hour:
          type: integer
          description: Hours before class starts that students must book by
        waitlist_lock_minutes:
          type: integer
          description: Minutes before class start to auto-add waitlisted students
        min_signup:
          type: integer
          description: Minimum number of students required for class to run
        cancel_buffer_minutes:
          type: integer
          description: Minutes before class to auto-cancel if minimum not met
        picture:
          type: string
          nullable: true
          description: Schedule picture filename
        createdAt:
          type: string
          format: date-time
          description: Creation timestamp
        updatedAt:
          type: string
          format: date-time
          description: Last update timestamp
        Class:
          $ref: '#/components/schemas/Class'
        Trainer:
          $ref: '#/components/schemas/Trainer'
        assignedMember:
          $ref: '#/components/schemas/Member'
    CreatePromoPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - group_session
        - private_session
        - start_time
        - end_time
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the promo package
          example: Summer Promo Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the promo package
          example: 500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 2
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        group_session:
          type: integer
          minimum: 0
          description: Group session
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Private session
          example: 2
        start_time:
          type: string
          format: date-time
          description: Start time
          example: '2024-07-25T08:00:00Z'
        end_time:
          type: string
          format: date-time
          description: End time
          example: '2024-07-25T10:00:00Z'
    RegisterRequest:
      type: object
      required:
        - full_name
        - username
        - email
        - dob
        - phone_number
        - password
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        username:
          type: string
          minLength: 3
          maxLength: 50
        email:
          type: string
          format: email
        dob:
          type: string
          format: date
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        password:
          type: string
          minLength: 6
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: admin@oblix.com
        password:
          type: string
          example: admin123
    ForgotPasswordRequest:
      type: object
      required:
        - email
      properties:
        email:
          type: string
          format: email
    ResetPasswordRequest:
      type: object
      required:
        - token
        - newPassword
      properties:
        token:
          type: string
        newPassword:
          type: string
          minLength: 6
    RefreshTokenRequest:
      type: object
      required:
        - refresh_token
      properties:
        refresh_token:
          type: string
    CreateBannerRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateBannerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Banner picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateBlogRequest:
      type: object
      required:
        - title
        - content
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 10000
        picture:
          type: string
          format: binary
          description: Blog picture (JPG, PNG, GIF, WebP, max 5MB) - Will be converted to WebP format
    UpdateBlogRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        content:
          type: string
          minLength: 10
          maxLength: 10000
        picture:
          type: string
          format: binary
          description: Blog picture (JPG, PNG, GIF, WebP, max 5MB) - Will be converted to WebP format - Optional
    CreateFAQRequest:
      type: object
      required:
        - title
        - content
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
    UpdateFAQRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
        content:
          type: string
    CreateGalleryRequest:
      type: object
      required:
        - title
        - picture
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateGalleryRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        picture:
          type: string
          format: binary
          description: Gallery picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateProfileRequest:
      type: object
      properties:
        full_name:
          type: string
          minLength: 3
          maxLength: 150
        phone_number:
          type: string
          minLength: 10
          maxLength: 15
        address:
          type: string
        picture:
          type: string
          format: uri
    ChangePasswordRequest:
      type: object
      required:
        - currentPassword
        - newPassword
      properties:
        currentPassword:
          type: string
        newPassword:
          type: string
          minLength: 6
    CreateTestimonialRequest:
      type: object
      required:
        - name
        - age
        - content
      properties:
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 120
        content:
          type: string
    UpdateTestimonialRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 150
        age:
          type: integer
          minimum: 1
          maximum: 120
        content:
          type: string
    CreateTrainerRequest:
      type: object
      required:
        - title
        - description
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB)
    UpdateTrainerRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 255
        description:
          type: string
          minLength: 10
          maxLength: 1000
        instagram:
          type: string
          format: uri
        tiktok:
          type: string
          format: uri
        picture:
          type: string
          format: binary
          description: Trainer picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateClassRequest:
      type: object
      required:
        - class_name
        - color_sign
      properties:
        class_name:
          type: string
          maxLength: 255
        color_sign:
          type: string
          maxLength: 7
    UpdateClassRequest:
      type: object
      properties:
        class_name:
          type: string
          maxLength: 255
        color_sign:
          type: string
          maxLength: 7
    CreatePackageRequest:
      type: object
      required:
        - name
        - price
        - type
        - duration_value
        - duration_unit
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: number
          minimum: 0
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
          minimum: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 31
        reminder_session:
          type: integer
          minimum: 1
    UpdatePackageRequest:
      type: object
      properties:
        name:
          type: string
          maxLength: 100
        price:
          type: number
          minimum: 0
        type:
          type: string
          enum:
            - membership
            - first_trial
            - promo
            - bonus
        duration_value:
          type: integer
          minimum: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 31
        reminder_session:
          type: integer
          minimum: 1
    CreateScheduleRequest:
      type: object
      required:
        - class_id
        - coach_id
        - pax
        - type
        - date_start
        - time_start
        - time_end
        - repeat_type
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          format: uri
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
          minimum: 1
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
        booking_deadline_hour:
          type: integer
          minimum: 0
        waitlist_lock_minutes:
          type: integer
          minimum: 0
        min_signup:
          type: integer
          minimum: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 0
    UpdateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
        photo_url:
          type: string
          format: uri
        coach_id:
          type: string
          format: uuid
        pax:
          type: integer
          minimum: 1
        type:
          type: string
          enum:
            - group
            - semi_private
            - private
        date_start:
          type: string
          format: date
        time_start:
          type: string
          format: time
        time_end:
          type: string
          format: time
        repeat_type:
          type: string
          enum:
            - none
            - weekly
        schedule_until:
          type: string
          format: date
        booking_deadline_hour:
          type: integer
          minimum: 0
        waitlist_lock_minutes:
          type: integer
          minimum: 0
        min_signup:
          type: integer
          minimum: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 0
    CreateBookingRequest:
      type: object
      required:
        - schedule_id
        - package_id
      properties:
        schedule_id:
          type: string
          format: uuid
        package_id:
          type: string
          format: uuid
    CreateOrderRequest:
      type: object
      required:
        - package_id
      properties:
        package_id:
          type: string
          format: uuid
          description: ID of the package to purchase
        quantity:
          type: integer
          minimum: 1
          maximum: 10
          default: 1
          description: Quantity of packages to purchase
        notes:
          type: string
          maxLength: 500
          description: Additional notes for the order
    PaymentNotificationRequest:
      type: object
      required:
        - transaction_status
        - order_id
      properties:
        transaction_status:
          type: string
          description: Transaction status from Midtrans
        order_id:
          type: string
          description: Order ID from Midtrans
        transaction_id:
          type: string
          description: Transaction ID from Midtrans
        fraud_status:
          type: string
          description: Fraud status from Midtrans
        payment_type:
          type: string
          description: Payment type from Midtrans
        va_numbers:
          type: array
          items:
            type: object
            properties:
              bank:
                type: string
              va_number:
                type: string
        pdf_url:
          type: string
          format: uri
          description: PDF URL from Midtrans
    CreateMembershipPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - session
        - category_id
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the membership package
          example: Premium Membership 3 Months
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the membership package
          example: 1500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 3
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 12
        category_id:
          type: string
          format: uuid
          description: Category ID for the membership package
          example: 123e4567-e89b-12d3-a456-426614174000
    UpdateMembershipPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the membership package
          example: Premium Membership 3 Months
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the membership package
          example: 1500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 3
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        session:
          type: integer
          minimum: 1
          description: Number of sessions included
          example: 12
        category_id:
          type: string
          format: uuid
          description: Category ID for the membership package
          example: 123e4567-e89b-12d3-a456-426614174000
    CreateTrialPackageRequest:
      type: object
      required:
        - name
        - price
        - duration_value
        - duration_unit
        - group_session
        - private_session
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the trial package
          example: 10 Session Group
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the trial package
          example: 630000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 10
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: week
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 10
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        group_session:
          type: integer
          minimum: 0
          description: Group session
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Private categories
          example: 2
    UpdateTrialPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the trial package
          example: 10 Session Group
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the trial package
          example: 630000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 10
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: week
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 10
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        group_session:
          type: integer
          minimum: 0
          description: Group session
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Private categories
          example: 2
    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the category
          example: Group
        description:
          type: string
          maxLength: 500
          description: Description of the category (optional)
          example: Group session category
    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: Name of the category
          example: Group
        description:
          type: string
          maxLength: 500
          description: Description of the category (optional)
          example: Group session category
    UpdatePromoPackageRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 100
          description: Name of the promo package
          example: Summer Promo Package
        price:
          type: number
          minimum: 0
          multipleOf: 0.01
          description: Price of the promo package
          example: 500000
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 2
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        reminder_day:
          type: integer
          minimum: 1
          maximum: 365
          nullable: true
          description: Reminder day (optional)
          example: 7
        reminder_session:
          type: integer
          minimum: 1
          maximum: 100
          nullable: true
          description: Reminder session (optional)
          example: 2
        group_session:
          type: integer
          minimum: 0
          description: Group session
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Private session
          example: 2
        start_time:
          type: string
          format: date-time
          description: Start time
          example: '2024-07-25T08:00:00Z'
        end_time:
          type: string
          format: date-time
          description: End time
          example: '2024-07-25T10:00:00Z'
    CreateBonusPackageRequest:
      type: object
      required:
        - group_session
        - private_session
        - duration_value
        - duration_unit
        - member_id
      properties:
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        group_session:
          type: integer
          minimum: 0
          description: Number of group sessions included
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Number of private sessions included
          example: 2
        member_id:
          type: string
          format: uuid
          description: Member ID for the bonus package
          example: 880e8400-e29b-41d4-a716-446655440001
    UpdateBonusPackageRequest:
      type: object
      properties:
        duration_value:
          type: integer
          minimum: 1
          description: Duration value
          example: 1
        duration_unit:
          type: string
          enum:
            - week
            - month
          description: Duration unit
          example: month
        group_session:
          type: integer
          minimum: 0
          description: Number of group sessions included
          example: 5
        private_session:
          type: integer
          minimum: 0
          description: Number of private sessions included
          example: 2
        member_id:
          type: string
          format: uuid
          description: Member ID for the bonus package
          example: 880e8400-e29b-41d4-a716-446655440001
    CreateStaffRequest:
      type: object
      required:
        - full_name
        - username
        - email
        - date_of_birth
        - phone_number
        - password
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          description: Full name of the staff member
          example: John Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9_]+$
          description: Username for login (letters, numbers, underscores only)
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the staff member
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          description: Date of birth (YYYY-MM-DD)
          example: '1990-01-15'
        phone_number:
          type: string
          pattern: ^[0-9+\\-\\s()]+$
          minLength: 10
          maxLength: 20
          description: Phone number
          example: +62 812-3456-7890
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Password for login
          example: password123
    UpdateStaffRequest:
      type: object
      properties:
        full_name:
          type: string
          minLength: 2
          maxLength: 100
          description: Full name of the staff member
          example: John Doe
        username:
          type: string
          minLength: 3
          maxLength: 50
          pattern: ^[a-zA-Z0-9_]+$
          description: Username for login (letters, numbers, underscores only)
          example: johndoe
        email:
          type: string
          format: email
          maxLength: 100
          description: Email address of the staff member
          example: john.doe@example.com
        date_of_birth:
          type: string
          format: date
          description: Date of birth (YYYY-MM-DD)
          example: '1990-01-15'
        phone_number:
          type: string
          pattern: ^[0-9+\\-\\s()]+$
          minLength: 10
          maxLength: 20
          description: Phone number
          example: +62 812-3456-7890
        password:
          type: string
          minLength: 6
          maxLength: 100
          description: Password for login (optional for updates)
          example: newpassword123
    CreateGroupScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - pax
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 123e4567-e89b-12d3-a456-426614174000
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 123e4567-e89b-12d3-a456-426614174001
        pax:
          type: integer
          minimum: 1
          maximum: 50
          description: Maximum number of participants
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-17'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '07:10'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '08:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        repeat_days:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 6
          minItems: 1
          maxItems: 7
          description: >-
            Days of the week to repeat (0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) -
            Required if repeat_type is weekly
          example:
            - 1
            - 3
            - 5
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-17'
        booking_deadline_hour:
          type: integer
          minimum: 0
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 6
        cancel_buffer_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateGroupScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 123e4567-e89b-12d3-a456-426614174000
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 123e4567-e89b-12d3-a456-426614174001
        pax:
          type: integer
          minimum: 1
          maximum: 50
          description: Maximum number of participants
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-17'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '07:10'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '08:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: weekly
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-17'
        booking_deadline_hour:
          type: integer
          minimum: 0
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 6
        cancel_buffer_minutes:
          type: integer
          minimum: 0
          maximum: 480
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreateSemiPrivateScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - pax
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        pax:
          type: integer
          minimum: 1
          maximum: 20
          description: Maximum number of participants (max 20 for semi-private)
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '10:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '11:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        repeat_days:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 6
          minItems: 1
          maxItems: 7
          description: >-
            Days of the week to repeat (0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) -
            Required if repeat_type is weekly
          example:
            - 1
            - 3
            - 5
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 3
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdateSemiPrivateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        pax:
          type: integer
          minimum: 1
          maximum: 20
          description: Maximum number of participants (max 20 for semi-private)
          example: 8
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '10:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '11:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: none
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          description: Minimum number of students required for class to run
          example: 3
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    CreatePrivateScheduleRequest:
      type: object
      required:
        - class_id
        - trainer_id
        - member_id
        - date_start
        - time_start
        - time_end
        - booking_deadline_hour
        - waitlist_lock_minutes
        - min_signup
        - cancel_buffer_minutes
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        member_id:
          type: string
          format: uuid
          description: Member ID to be assigned (auto booking)
          example: 880e8400-e29b-41d4-a716-446655440001
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '14:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '15:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          default: none
          description: Repeat type for the schedule
          example: weekly
        repeat_days:
          type: array
          items:
            type: integer
            minimum: 0
            maximum: 6
          minItems: 1
          maxItems: 7
          description: >-
            Days of the week to repeat (0=Sunday, 1=Monday, 2=Tuesday, 3=Wednesday, 4=Thursday, 5=Friday, 6=Saturday) -
            Required if repeat_type is weekly
          example:
            - 1
            - 3
            - 5
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          maximum: 2
          description: Minimum number of students required for class to run (max 2 for private)
          example: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
    UpdatePrivateScheduleRequest:
      type: object
      properties:
        class_id:
          type: string
          format: uuid
          description: Class ID
          example: 660e8400-e29b-41d4-a716-446655440001
        trainer_id:
          type: string
          format: uuid
          description: Trainer ID
          example: 770e8400-e29b-41d4-a716-446655440001
        member_id:
          type: string
          format: uuid
          description: Member ID to be assigned (auto booking)
          example: 880e8400-e29b-41d4-a716-446655440001
        date_start:
          type: string
          format: date
          description: Start date (YYYY-MM-DD)
          example: '2025-07-25'
        time_start:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: Start time (HH:MM)
          example: '14:00'
        time_end:
          type: string
          pattern: ^([01]?[0-9]|2[0-3]):[0-5][0-9]$
          description: End time (HH:MM)
          example: '15:00'
        repeat_type:
          type: string
          enum:
            - none
            - weekly
          description: Repeat type for the schedule
          example: none
        schedule_until:
          type: string
          format: date
          description: End date for repeated schedules (YYYY-MM-DD) - Required if repeat_type is weekly
          example: '2025-10-25'
        booking_deadline_hour:
          type: integer
          minimum: 1
          maximum: 72
          description: Hours before class starts that students must book by
          example: 2
        waitlist_lock_minutes:
          type: integer
          minimum: 30
          maximum: 480
          description: Minutes before class start to auto-add waitlisted students
          example: 120
        min_signup:
          type: integer
          minimum: 1
          maximum: 2
          description: Minimum number of students required for class to run (max 2 for private)
          example: 1
        cancel_buffer_minutes:
          type: integer
          minimum: 30
          maximum: 1440
          description: Minutes before class to auto-cancel if minimum not met
          example: 120
        picture:
          type: string
          format: binary
          description: Schedule picture (JPG, PNG, GIF, WebP, max 5MB) - Optional
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register new user
      description: Register a new user and create member profile
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Registration successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user_id:
                            type: string
                            format: uuid
                          email:
                            type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access tokens
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string
                          user:
                            $ref: '#/components/schemas/User'
        '400':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/forgot-password:
    post:
      tags:
        - Authentication
      summary: Request password reset
      description: Send password reset link to user's email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '200':
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Email not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/reset-password:
    post:
      tags:
        - Authentication
      summary: Reset password
      description: Reset password using reset token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
      responses:
        '200':
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid or expired token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Get new access token using refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - refreshToken
              properties:
                refreshToken:
                  type: string
                  description: Refresh token from previous login
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
      responses:
        '200':
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          access_token:
                            type: string
                          refresh_token:
                            type: string
        '400':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Logout user and invalidate tokens
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/purchase-status:
    get:
      tags:
        - Authentication
      summary: Check user purchase status
      description: Get user's package purchase status (has_purchased_package)
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Purchase status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Purchase status retrieved successfully
                  data:
                    type: object
                    properties:
                      has_purchased_package:
                        type: boolean
                        description: Whether user has purchased any package
                        example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /banner:
    get:
      tags:
        - Content Management
      summary: Get all banners
      description: Retrieve all banners with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Banners retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new banner
      description: Create a new banner (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateBannerRequest'
      responses:
        '201':
          description: Banner created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /banner/{id}:
    get:
      tags:
        - Content Management
      summary: Get banner by ID
      description: Retrieve a specific banner by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update banner
      description: Update a banner by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateBannerRequest'
      responses:
        '200':
          description: Banner updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Banner'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete banner
      description: Delete a banner by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Banner ID
      responses:
        '200':
          description: Banner deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Banner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blog:
    get:
      tags:
        - Content Management
      summary: Get all blogs
      description: Retrieve all blogs with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Blogs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new blog
      description: Create a new blog (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateBlogRequest'
      responses:
        '201':
          description: Blog created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blog/{id}:
    get:
      tags:
        - Content Management
      summary: Get blog by ID
      description: Retrieve a specific blog by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      responses:
        '200':
          description: Blog retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update blog
      description: Update a blog by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateBlogRequest'
      responses:
        '200':
          description: Blog updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Blog'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete blog
      description: Delete a blog by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Blog ID
      responses:
        '200':
          description: Blog deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /faq:
    get:
      tags:
        - Content Management
      summary: Get all FAQs
      description: Retrieve all FAQs with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: FAQs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new FAQ
      description: Create a new FAQ (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFAQRequest'
      responses:
        '201':
          description: FAQ created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /faq/{id}:
    get:
      tags:
        - Content Management
      summary: Get FAQ by ID
      description: Retrieve a specific FAQ by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update FAQ
      description: Update a FAQ by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFAQRequest'
      responses:
        '200':
          description: FAQ updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/FAQ'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete FAQ
      description: Delete a FAQ by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: FAQ ID
      responses:
        '200':
          description: FAQ deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: FAQ not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gallery:
    get:
      tags:
        - Content Management
      summary: Get all galleries
      description: Retrieve all galleries with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Galleries retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new gallery
      description: Create a new gallery (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGalleryRequest'
      responses:
        '201':
          description: Gallery created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /gallery/{id}:
    get:
      tags:
        - Content Management
      summary: Get gallery by ID
      description: Retrieve a specific gallery by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update gallery
      description: Update a gallery by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateGalleryRequest'
      responses:
        '200':
          description: Gallery updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Gallery'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete gallery
      description: Delete a gallery by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Gallery ID
      responses:
        '200':
          description: Gallery deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Gallery not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /testimonial:
    get:
      tags:
        - Content Management
      summary: Get all testimonials
      description: Retrieve all testimonials with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Testimonials retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Content Management
      summary: Create new testimonial
      description: Create a new testimonial (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestimonialRequest'
      responses:
        '201':
          description: Testimonial created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /testimonial/{id}:
    get:
      tags:
        - Content Management
      summary: Get testimonial by ID
      description: Retrieve a specific testimonial by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Content Management
      summary: Update testimonial
      description: Update a testimonial by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestimonialRequest'
      responses:
        '200':
          description: Testimonial updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Testimonial'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Content Management
      summary: Delete testimonial
      description: Delete a testimonial by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Testimonial ID
      responses:
        '200':
          description: Testimonial deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Testimonial not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile:
    get:
      tags:
        - Profile Management
      summary: Get user profile
      description: Retrieve current user's profile information
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Profile Management
      summary: Update user profile
      description: Update current user's profile information
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                full_name:
                  type: string
                  minLength: 3
                  maxLength: 150
                username:
                  type: string
                  minLength: 3
                  maxLength: 50
                phone_number:
                  type: string
                  minLength: 10
                  maxLength: 15
                dob:
                  type: string
                  format: date
                address:
                  type: string
                  maxLength: 500
                picture:
                  type: string
                  format: binary
                  description: Profile photo (JPG, PNG, GIF, WebP, max 5MB)
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile/change-password:
    put:
      tags:
        - Profile Management
      summary: Change password
      description: Change current user's password
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Current password is incorrect
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /profile/profile-photo:
    delete:
      tags:
        - Profile Management
      summary: Delete profile photo
      description: Remove user's profile photo
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile photo deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer:
    get:
      tags:
        - Trainer Management
      summary: Get all trainers
      description: Retrieve all trainers with pagination
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
      responses:
        '200':
          description: Trainers retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Trainer Management
      summary: Create new trainer
      description: Create a new trainer (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTrainerRequest'
      responses:
        '201':
          description: Trainer created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer/{id}:
    get:
      tags:
        - Trainer Management
      summary: Get trainer by ID
      description: Retrieve a specific trainer by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Trainer Management
      summary: Update trainer
      description: Update a trainer by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTrainerRequest'
      responses:
        '200':
          description: Trainer updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Trainer'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Trainer Management
      summary: Delete trainer
      description: Delete a trainer by ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trainer/{id}/picture:
    delete:
      tags:
        - Trainer Management
      summary: Delete trainer picture
      description: Delete trainer's picture only (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trainer ID
      responses:
        '200':
          description: Trainer picture deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trainer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package:
    get:
      tags:
        - Membership Package Management
      summary: Get all membership packages
      description: Retrieve all membership packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Membership packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/MembershipPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Membership Package Management
      summary: Create new membership package
      description: Create a new membership package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMembershipPackageRequest'
      responses:
        '201':
          description: Membership package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package/{id}:
    get:
      tags:
        - Membership Package Management
      summary: Get membership package by ID
      description: Retrieve a specific membership package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      responses:
        '200':
          description: Membership package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Membership Package Management
      summary: Update membership package
      description: Update an existing membership package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMembershipPackageRequest'
      responses:
        '200':
          description: Membership package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MembershipPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Membership Package Management
      summary: Delete membership package
      description: Delete an existing membership package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Membership package ID
      responses:
        '200':
          description: Membership package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-package/categories/list:
    get:
      tags:
        - Membership Package Management
      summary: Get categories for membership package
      description: Retrieve all categories for membership package creation/update (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Category'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trial-package:
    get:
      tags:
        - Trial Package Management
      summary: Get all trial packages
      description: Retrieve all trial packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Trial packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/TrialPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Trial Package Management
      summary: Create new trial package
      description: Create a new trial package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrialPackageRequest'
      responses:
        '201':
          description: Trial package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /trial-package/{id}:
    get:
      tags:
        - Trial Package Management
      summary: Get trial package by ID
      description: Retrieve a specific trial package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      responses:
        '200':
          description: Trial package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Trial Package Management
      summary: Update trial package
      description: Update an existing trial package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTrialPackageRequest'
      responses:
        '200':
          description: Trial package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TrialPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Trial Package Management
      summary: Delete trial package
      description: Delete an existing trial package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Trial package ID
      responses:
        '200':
          description: Trial package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Trial package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /promo-package:
    get:
      tags:
        - Promo Package Management
      summary: Get all promo packages
      description: Retrieve all promo packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Promo packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/PromoPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Promo Package Management
      summary: Create new promo package
      description: Create a new promo package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePromoPackageRequest'
            example:
              name: Summer Promo Package
              price: 500000
              duration_value: 2
              duration_unit: month
              reminder_day: 7
              reminder_session: 2
              group_session: 5
              private_session: 2
              start_time: '2024-07-25T08:00:00Z'
              end_time: '2024-07-25T10:00:00Z'
      responses:
        '201':
          description: Promo package created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /promo-package/{id}:
    get:
      tags:
        - Promo Package Management
      summary: Get promo package by ID
      description: Retrieve a specific promo package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      responses:
        '200':
          description: Promo package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Promo Package Management
      summary: Update promo package
      description: Update an existing promo package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePromoPackageRequest'
      responses:
        '200':
          description: Promo package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PromoPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Promo Package Management
      summary: Delete promo package
      description: Delete an existing promo package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Promo package ID
      responses:
        '200':
          description: Promo package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Promo package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package:
    get:
      tags:
        - Bonus Package Management
      summary: Get all bonus packages
      description: Retrieve all bonus packages with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for package name
      responses:
        '200':
          description: Bonus packages retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          packages:
                            type: array
                            items:
                              $ref: '#/components/schemas/BonusPackage'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Bonus Package Management
      summary: Create new bonus package
      description: Create a new bonus package (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - duration_value
                - duration_unit
                - group_session
                - private_session
                - member_id
              properties:
                duration_value:
                  type: integer
                  example: 1
                duration_unit:
                  type: string
                  enum:
                    - week
                    - month
                  example: month
                group_session:
                  type: integer
                  example: 5
                private_session:
                  type: integer
                  example: 2
                member_id:
                  type: string
                  format: uuid
                  example: uuid-member-1
      responses:
        '201':
          description: Bonus package created and assigned to member successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        description: Package ID
                      group_session:
                        type: integer
                        description: Number of group sessions included
                      private_session:
                        type: integer
                        description: Number of private sessions included
                      duration_value:
                        type: integer
                        description: Duration value
                      duration_unit:
                        type: string
                        enum:
                          - week
                          - month
                        description: Duration unit
                      member_id:
                        type: string
                        format: uuid
                        description: Member ID
        '400':
          description: Validation error or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package/members/search:
    get:
      tags:
        - Bonus Package Management
      summary: Search members for bonus package
      description: Search members by name for bonus package assignment
      parameters:
        - in: query
          name: search
          schema:
            type: string
          description: Search term for member name
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Member'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /bonus-package/{id}:
    get:
      tags:
        - Bonus Package Management
      summary: Get bonus package by ID
      description: Retrieve a specific bonus package by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      responses:
        '200':
          description: Bonus package retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BonusPackage'
        '400':
          description: Invalid package ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Bonus Package Management
      summary: Update bonus package
      description: Update an existing bonus package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBonusPackageRequest'
      responses:
        '200':
          description: Bonus package updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/BonusPackage'
        '400':
          description: Validation error, invalid ID format, or package with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Bonus Package Management
      summary: Delete bonus package
      description: Delete an existing bonus package (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Bonus package ID
      responses:
        '200':
          description: Bonus package deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid package ID format or package is being used in orders
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Bonus package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /staff:
    get:
      tags:
        - Staff Management
      summary: Get all staff
      description: Retrieve all staff members with pagination and search functionality (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for staff name, username, or email
      responses:
        '200':
          description: Staff retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          staff:
                            type: array
                            items:
                              $ref: '#/components/schemas/Staff'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Staff Management
      summary: Create new staff
      description: Create a new staff member (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStaffRequest'
      responses:
        '201':
          description: Staff created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Validation error or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /staff/{id}:
    get:
      tags:
        - Staff Management
      summary: Get staff by ID
      description: Retrieve a specific staff member by their ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      responses:
        '200':
          description: Staff retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Invalid staff ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Staff Management
      summary: Update staff
      description: Update an existing staff member (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStaffRequest'
      responses:
        '200':
          description: Staff updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Staff'
        '400':
          description: Validation error, invalid ID format, or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Staff Management
      summary: Delete staff
      description: Delete an existing staff member (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Staff ID
      responses:
        '200':
          description: Staff deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid staff ID format or cannot delete the only admin user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Staff not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category:
    get:
      tags:
        - Category Management
      summary: Get all categories
      description: Retrieve all categories with pagination and search functionality
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for category name
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          categories:
                            type: array
                            items:
                              $ref: '#/components/schemas/Category'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Category Management
      summary: Create new category
      description: Create a new category (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Validation error or category with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /category/{id}:
    get:
      tags:
        - Category Management
      summary: Get category by ID
      description: Retrieve a specific category by its ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '200':
          description: Category retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Invalid category ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Category Management
      summary: Update category
      description: Update an existing category (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
      responses:
        '200':
          description: Category updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Category'
        '400':
          description: Validation error, invalid ID format, or category with same name exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Category Management
      summary: Delete category
      description: Delete an existing category (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Category ID
      responses:
        '200':
          description: Category deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '400':
          description: Invalid category ID format or category is being used in packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/create:
    post:
      tags:
        - Order Management
      summary: Create new order
      description: Create a new order for package purchase with Midtrans integration
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateOrderResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Package not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/my-orders:
    get:
      tags:
        - Order Management
      summary: Get user orders
      description: Retrieve paginated list of user's orders
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: status
          in: query
          description: Filter by payment status
          required: false
          schema:
            type: string
            enum:
              - pending
              - paid
              - failed
              - expired
              - cancelled
      responses:
        '200':
          description: Orders retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetUserOrdersResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{id}:
    get:
      tags:
        - Order Management
      summary: Get order by ID
      description: Retrieve specific order details
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrderByIdResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{order_id}/status:
    get:
      tags:
        - Order Management
      summary: Check payment status
      description: Check payment status from Midtrans and update order
      security:
        - BearerAuth: []
      parameters:
        - name: order_id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckPaymentStatusResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/{order_id}/cancel:
    delete:
      tags:
        - Order Management
      summary: Cancel order
      description: Cancel pending order and Midtrans transaction
      security:
        - BearerAuth: []
      parameters:
        - name: order_id
          in: path
          description: Order ID
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CancelOrderResponse'
        '400':
          description: Order cannot be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/notification:
    post:
      tags:
        - Payment
      summary: Payment notification from Midtrans
      description: |
        Endpoint untuk menerima notifikasi pembayaran dari Midtrans (webhook).
        Endpoint ini dipanggil otomatis oleh Midtrans setelah status pembayaran berubah.
        Tidak memerlukan autentikasi karena dipanggil oleh Midtrans server.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentNotification'
      responses:
        '200':
          description: Notification processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /order/payment/finish:
    get:
      tags:
        - Payment
      summary: Payment finish callback (Redirect)
      description: |
        Callback URL untuk redirect user setelah pembayaran berhasil.
        Endpoint ini dipanggil oleh Midtrans Snap ketika user mengklik tombol "Kembali ke Merchant"
        atau setelah pembayaran selesai. User akan di-redirect ke frontend success page.

        **URL Redirect:** `{FRONTEND_URL}/payment/success?order_id={order_id}`

        **Contoh:** `https://oblix-pilates.vercel.app/payment/success?order_id=ORD-123456789`
      parameters:
        - name: order_id
          in: query
          description: Order ID dari Midtrans
          required: false
          schema:
            type: string
            example: ORD-1753523164857-424
        - name: transaction_status
          in: query
          description: Status transaksi dari Midtrans
          required: false
          schema:
            type: string
            enum:
              - settlement
              - capture
              - pending
              - deny
              - cancel
              - expire
              - failure
            example: settlement
        - name: transaction_id
          in: query
          description: Transaction ID dari Midtrans
          required: false
          schema:
            type: string
            example: '123456789'
        - name: status_code
          in: query
          description: Status code dari Midtrans
          required: false
          schema:
            type: string
            example: '200'
      responses:
        '302':
          description: Redirect to frontend success page
          headers:
            Location:
              description: Redirect URL to frontend success page
              schema:
                type: string
                example: https://oblix-pilates.vercel.app/payment/success?order_id=ORD-1753523164857-424
  /order/payment/error:
    get:
      tags:
        - Payment
      summary: Payment error callback (Redirect)
      description: |
        Callback URL untuk redirect user jika pembayaran gagal.
        Endpoint ini dipanggil oleh Midtrans Snap ketika pembayaran gagal atau dibatalkan.
        User akan di-redirect ke frontend error page.

        **URL Redirect:** `{FRONTEND_URL}/payment/error?order_id={order_id}`

        **Contoh:** `https://oblix-pilates.vercel.app/payment/error?order_id=ORD-123456789`
      parameters:
        - name: order_id
          in: query
          description: Order ID dari Midtrans
          required: false
          schema:
            type: string
            example: ORD-1753523164857-424
        - name: transaction_status
          in: query
          description: Status transaksi dari Midtrans
          required: false
          schema:
            type: string
            enum:
              - deny
              - cancel
              - expire
              - failure
            example: deny
        - name: transaction_id
          in: query
          description: Transaction ID dari Midtrans
          required: false
          schema:
            type: string
            example: '123456789'
        - name: status_code
          in: query
          description: Status code dari Midtrans
          required: false
          schema:
            type: string
            example: '400'
      responses:
        '302':
          description: Redirect to frontend error page
          headers:
            Location:
              description: Redirect URL to frontend error page
              schema:
                type: string
                example: https://oblix-pilates.vercel.app/payment/error?order_id=ORD-1753523164857-424
  /order/payment/pending:
    get:
      tags:
        - Payment
      summary: Payment pending callback (Redirect)
      description: |
        Callback URL untuk redirect user jika pembayaran pending.
        Endpoint ini dipanggil oleh Midtrans Snap ketika pembayaran masih dalam status pending
        (misalnya menunggu konfirmasi dari bank). User akan di-redirect ke frontend pending page.

        **URL Redirect:** `{FRONTEND_URL}/payment/pending?order_id={order_id}`

        **Contoh:** `https://oblix-pilates.vercel.app/payment/pending?order_id=ORD-123456789`
      parameters:
        - name: order_id
          in: query
          description: Order ID dari Midtrans
          required: false
          schema:
            type: string
            example: ORD-1753523164857-424
        - name: transaction_status
          in: query
          description: Status transaksi dari Midtrans
          required: false
          schema:
            type: string
            enum:
              - pending
            example: pending
        - name: transaction_id
          in: query
          description: Transaction ID dari Midtrans
          required: false
          schema:
            type: string
            example: '123456789'
        - name: status_code
          in: query
          description: Status code dari Midtrans
          required: false
          schema:
            type: string
            example: '201'
      responses:
        '302':
          description: Redirect to frontend pending page
          headers:
            Location:
              description: Redirect URL to frontend pending page
              schema:
                type: string
                example: https://oblix-pilates.vercel.app/payment/pending?order_id=ORD-1753523164857-424
  /schedule/group:
    get:
      tags:
        - Schedule Management
      summary: Get all group schedules
      description: |
        Retrieve all group schedules with pagination and search.
        Returns detailed information including booking status, available slots, and member details.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by class name
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD)
      responses:
        '200':
          description: Group schedules retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/GroupScheduleDetail'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
                          filters:
                            type: object
                            properties:
                              search:
                                type: string
                                nullable: true
                              date:
                                type: string
                                nullable: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new group schedule
      description: Create a new group schedule (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateGroupScheduleRequest'
      responses:
        '201':
          description: Group schedule created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedule:
                            $ref: '#/components/schemas/GroupSchedule'
                          totalSchedules:
                            type: integer
                            example: 14
                          repeatType:
                            type: string
                            example: weekly
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/group/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get group schedule by ID
      description: |
        Retrieve a specific group schedule by ID.
        Returns detailed information including all booking details and member information.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Group schedule retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GroupScheduleDetail'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update group schedule
      description: Update an existing group schedule (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateGroupScheduleRequest'
      responses:
        '200':
          description: Group schedule updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/GroupSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete group schedule
      description: Delete a group schedule (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Group schedule deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/semi-private:
    get:
      tags:
        - Schedule Management
      summary: Get all semi-private schedules
      description: |
        Retrieve all semi-private schedules with pagination and search.
        Returns detailed information including booking status, available slots, and member details.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by class name
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD)
      responses:
        '200':
          description: Semi-private schedules retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/SemiPrivateScheduleDetail'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
                          filters:
                            type: object
                            properties:
                              search:
                                type: string
                                nullable: true
                              date:
                                type: string
                                nullable: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new semi-private schedule
      description: Create a new semi-private schedule (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSemiPrivateScheduleRequest'
      responses:
        '201':
          description: Semi-private schedule created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule created successfully (14 schedules generated)
                  data:
                    type: object
                    properties:
                      schedule:
                        $ref: '#/components/schemas/GroupSchedule'
                      totalSchedules:
                        type: integer
                        example: 14
                      repeatType:
                        type: string
                        example: weekly
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/semi-private/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get semi-private schedule by ID
      description: |
        Retrieve a specific semi-private schedule by ID.
        Returns detailed information including all booking details and member information.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Semi-private schedule retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/SemiPrivateScheduleDetail'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update semi-private schedule
      description: Update an existing semi-private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateSemiPrivateScheduleRequest'
      responses:
        '200':
          description: Semi-private schedule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule updated successfully
                  data:
                    $ref: '#/components/schemas/GroupSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete semi-private schedule
      description: Delete a semi-private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Semi-private schedule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Semi-private schedule deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/private:
    get:
      tags:
        - Schedule Management
      summary: Get all private schedules
      description: |
        Retrieve all private schedules with pagination and search.
        Returns detailed information including booking status, assigned member, and member details.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search by class name
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by specific date (YYYY-MM-DD)
      responses:
        '200':
          description: Private schedules retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          schedules:
                            type: array
                            items:
                              $ref: '#/components/schemas/PrivateScheduleDetail'
                          pagination:
                            $ref: '#/components/schemas/PaginationInfo'
                          filters:
                            type: object
                            properties:
                              search:
                                type: string
                                nullable: true
                              date:
                                type: string
                                nullable: true
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Schedule Management
      summary: Create new private schedule with auto booking
      description: Create a new private schedule with automatic booking for assigned member (admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreatePrivateScheduleRequest'
      responses:
        '201':
          description: Private schedule created successfully with auto booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule created successfully (14 schedules generated)
                  data:
                    type: object
                    properties:
                      schedule:
                        $ref: '#/components/schemas/PrivateSchedule'
                      totalSchedules:
                        type: integer
                        example: 14
                      totalBookings:
                        type: integer
                        example: 14
                      repeatType:
                        type: string
                        example: weekly
                      assignedMember:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          full_name:
                            type: string
                          email:
                            type: string
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/private/{id}:
    get:
      tags:
        - Schedule Management
      summary: Get private schedule by ID
      description: |
        Retrieve a specific private schedule by ID.
        Returns detailed information including assigned member and all booking details.
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Private schedule retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PrivateScheduleDetail'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Schedule Management
      summary: Update private schedule
      description: Update an existing private schedule (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePrivateScheduleRequest'
      responses:
        '200':
          description: Private schedule updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule updated successfully
                  data:
                    $ref: '#/components/schemas/PrivateSchedule'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Schedule Management
      summary: Delete private schedule
      description: Delete a private schedule and its associated bookings (admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Schedule ID
      responses:
        '200':
          description: Private schedule deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Private schedule deleted successfully
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /schedule/calendar:
    get:
      tags:
        - Schedule Management
      summary: Get schedule calendar data
      description: |
        Retrieve schedule data formatted for calendar display. Returns schedules with class details, 
        trainer information, booking counts, and availability status.

        **Features:**
        - Filter by month, year, and schedule type
        - Shows booking counts and available spots
        - Groups schedules by date for easy calendar rendering
        - Includes class colors, trainer details, and member assignments
        - Shows waiting list status

        **Default Values:**
        - Month: Current month (1-12)
        - Year: Current year
        - Type: All types (group, semi_private, private)
      security:
        - BearerAuth: []
      parameters:
        - name: month
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 12
            example: 7
          description: Month to display (1-12). Default is current month.
        - name: year
          in: query
          required: false
          schema:
            type: integer
            minimum: 2020
            maximum: 2100
            example: 2025
          description: Year to display. Default is current year.
        - name: type
          in: query
          required: false
          schema:
            type: string
            enum:
              - group
              - semi_private
              - private
            example: group
          description: Filter by schedule type. Default shows all types.
      responses:
        '200':
          description: Schedule calendar data retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Schedule calendar data retrieved successfully
                  data:
                    type: object
                    properties:
                      month:
                        type: integer
                        example: 7
                      year:
                        type: integer
                        example: 2025
                      filter_type:
                        type: string
                        example: all
                      total_schedules:
                        type: integer
                        example: 15
                      schedules_by_date:
                        type: object
                        description: Schedules grouped by date for calendar rendering
                        additionalProperties:
                          type: array
                          items:
                            $ref: '#/components/schemas/ScheduleCalendarItem'
                        example:
                          '2025-07-15':
                            - id: schedule-uuid-1
                              class_name: Chair Basic
                              class_color: '#4F46E5'
                              trainer_name: Sarah Johnson
                              type: group
                              date: '2025-07-15'
                              time_start: '07:10'
                              time_end: '08:10'
                      schedules:
                        type: array
                        description: Flat array of all schedules
                        items:
                          $ref: '#/components/schemas/ScheduleCalendarItem'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/schedules/cancel-tasks/status:
    get:
      tags:
        - Schedule Management
      summary: Get scheduled cancel tasks status
      description: Get the current status of all scheduled cancel tasks for dynamic scheduling
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Scheduled cancel tasks status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Scheduled cancel tasks status retrieved successfully
                  data:
                    type: object
                    properties:
                      total_scheduled:
                        type: integer
                        description: Total number of scheduled cancel tasks
                        example: 5
                      scheduled_schedules:
                        type: array
                        items:
                          type: string
                          format: uuid
                        description: Array of schedule IDs that have scheduled cancel tasks
                        example:
                          - 6b8f4d2e-1a3c-4e8b-9d7f-2c5a8e1b4f9d
                          - 7c9f5e3f-2b4d-5f9c-0e6b-3d6a9f2c5e0a
        '401':
          $ref: ./base.yaml#/components/responses/Unauthorized
        '403':
          $ref: ./base.yaml#/components/responses/Forbidden
        '500':
          $ref: ./base.yaml#/components/responses/InternalServerError
  /api/schedules/cancel-tasks/refresh:
    post:
      tags:
        - Schedule Management
      summary: Refresh dynamic cancel scheduling
      description: Manually refresh the dynamic cancel scheduling system to pick up new or updated schedules
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dynamic cancel scheduling refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Dynamic cancel scheduling refreshed successfully
                  data:
                    type: object
                    properties:
                      success:
                        type: boolean
                        example: true
                      scheduled_count:
                        type: integer
                        description: Number of schedules scheduled for auto-cancel
                        example: 8
                      total_schedules:
                        type: integer
                        description: Total number of schedules processed
                        example: 12
        '401':
          $ref: ./base.yaml#/components/responses/Unauthorized
        '403':
          $ref: ./base.yaml#/components/responses/Forbidden
        '500':
          $ref: ./base.yaml#/components/responses/InternalServerError
  /api/booking:
    get:
      tags:
        - Booking Management
      summary: Get all bookings with pagination and filters
      description: Retrieve all bookings with optional filtering by member_id, schedule_id, and status
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: member_id
          in: query
          description: Filter by member ID
          required: false
          schema:
            type: string
            format: uuid
        - name: schedule_id
          in: query
          description: Filter by schedule ID
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: Filter by booking status
          required: false
          schema:
            type: string
            enum:
              - signup
              - waiting_list
              - cancelled
      responses:
        '200':
          description: Bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Bookings retrieved successfully
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookingResponse'
                      pagination:
                        $ref: '#/components/schemas/PaginationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Booking Management
      summary: Create new booking
      description: >-
        Create a new booking for group or semi-private schedule. System will automatically validate session availability
        and select appropriate package.
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - schedule_id
                - member_id
              properties:
                schedule_id:
                  type: string
                  format: uuid
                  description: ID of the schedule to book
                  example: 123e4567-e89b-12d3-a456-426614174000
                member_id:
                  type: string
                  format: uuid
                  description: ID of the member making the booking
                  example: 123e4567-e89b-12d3-a456-426614174001
                notes:
                  type: string
                  maxLength: 500
                  description: Optional notes for the booking
                  example: Booking for group class
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking created successfully
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/{id}:
    get:
      tags:
        - Booking Management
      summary: Get booking by ID
      description: Retrieve a specific booking by its ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      responses:
        '200':
          description: Booking retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking retrieved successfully
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Booking Management
      summary: Delete booking
      description: Delete a booking (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking to delete
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      responses:
        '200':
          description: Booking deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking deleted successfully
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/{id}/status:
    patch:
      tags:
        - Booking Management
      summary: Update booking status
      description: Update the status of a booking (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - signup
                    - waiting_list
                    - cancelled
                  description: New status for the booking
                  example: signup
                notes:
                  type: string
                  maxLength: 500
                  description: Optional notes for the status change
                  example: Status updated by admin
      responses:
        '200':
          description: Booking status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking status updated successfully
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/{id}/attendance:
    patch:
      tags:
        - Booking Management
      summary: Update booking attendance
      description: Update attendance status for a specific booking
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - attendance
              properties:
                attendance:
                  type: string
                  enum:
                    - present
                    - absent
                  description: Attendance status
                  example: present
                notes:
                  type: string
                  maxLength: 500
                  description: Optional notes for the attendance
                  example: Hadir tepat waktu
      responses:
        '200':
          description: Attendance updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Attendance updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174001
                      attendance:
                        type: string
                        enum:
                          - present
                          - absent
                        example: present
                      notes:
                        type: string
                        nullable: true
                        example: Hadir tepat waktu
                      updated_at:
                        type: string
                        format: date-time
                        example: '2025-07-15T07:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/schedule/{schedule_id}/attendance:
    patch:
      tags:
        - Booking Management
      summary: Update attendance for all bookings in a schedule
      description: Update attendance status for all members who booked a specific schedule. Useful for bulk attendance marking.
      security:
        - BearerAuth: []
      parameters:
        - name: schedule_id
          in: path
          description: ID of the schedule
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - attendances
              properties:
                attendances:
                  type: array
                  description: Array of attendance data for each booking
                  minItems: 1
                  items:
                    type: object
                    required:
                      - booking_id
                      - attendance
                    properties:
                      booking_id:
                        type: string
                        format: uuid
                        description: ID of the booking
                        example: 123e4567-e89b-12d3-a456-426614174001
                      attendance:
                        type: string
                        enum:
                          - present
                          - absent
                        description: Attendance status
                        example: present
                      notes:
                        type: string
                        maxLength: 500
                        description: Optional notes for the attendance
                        example: Hadir tepat waktu
      responses:
        '200':
          description: Schedule attendance updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Schedule attendance updated successfully
                  data:
                    type: object
                    properties:
                      schedule_id:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174000
                      schedule_info:
                        type: object
                        properties:
                          class_name:
                            type: string
                            example: Pilates Basic
                          trainer_name:
                            type: string
                            example: Sarah Johnson
                          date:
                            type: string
                            format: date
                            example: '2025-07-15'
                          time:
                            type: string
                            format: time
                            example: '07:00'
                      total_bookings:
                        type: integer
                        description: Total number of bookings updated
                        example: 5
                      updated_bookings:
                        type: array
                        description: List of updated bookings with attendance
                        items:
                          type: object
                          properties:
                            booking_id:
                              type: string
                              format: uuid
                              example: 123e4567-e89b-12d3-a456-426614174001
                            member_id:
                              type: string
                              format: uuid
                              example: 123e4567-e89b-12d3-a456-426614174002
                            member_name:
                              type: string
                              example: John Doe
                            attendance:
                              type: string
                              enum:
                                - present
                                - absent
                              example: present
                            notes:
                              type: string
                              nullable: true
                              example: Hadir tepat waktu
                            updated_at:
                              type: string
                              format: date-time
                              example: '2025-07-15T07:00:00Z'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Schedule or bookings not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Schedule not found
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/{id}/cancel:
    post:
      tags:
        - Booking Management
      summary: Cancel booking
      description: Cancel a booking (Member can cancel their own booking)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking to cancel
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Optional reason for cancellation
                  example: Cannot attend due to emergency
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking cancelled successfully
                  data:
                    $ref: '#/components/schemas/BookingResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/{id}/admin-cancel:
    post:
      tags:
        - Booking Management
      summary: Admin cancel booking
      description: Allow admin to cancel a member's booking with optional reason
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          description: ID of the booking to cancel
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174001
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                reason:
                  type: string
                  maxLength: 500
                  description: Optional reason for cancellation
                  example: Member requested cancellation
      responses:
        '200':
          description: Booking cancelled successfully by admin
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking cancelled successfully by admin
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        format: uuid
                        example: 123e4567-e89b-12d3-a456-426614174001
                      status:
                        type: string
                        enum:
                          - cancelled
                        example: cancelled
                      notes:
                        type: string
                        example: 'Admin cancelled: Member requested cancellation'
                      cancelled_at:
                        type: string
                        format: date-time
                        example: '2025-07-15T07:00:00Z'
        '400':
          description: Booking already cancelled
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Booking is already cancelled
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/member/{member_id}/sessions:
    get:
      tags:
        - Booking Management
      summary: Get member session summary
      description: Get session summary for a specific member including available sessions across all packages
      security:
        - BearerAuth: []
      parameters:
        - name: member_id
          in: path
          description: ID of the member
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174002
      responses:
        '200':
          description: Member session summary retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Member session summary retrieved successfully
                  data:
                    $ref: '#/components/schemas/MemberSessionSummary'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/member/{member_id}/bookings:
    get:
      tags:
        - Booking Management
      summary: Get bookings by member ID
      description: Retrieve all bookings for a specific member with pagination
      security:
        - BearerAuth: []
      parameters:
        - name: member_id
          in: path
          description: ID of the member
          required: true
          schema:
            type: string
            format: uuid
            example: 123e4567-e89b-12d3-a456-426614174002
        - name: page
          in: query
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          required: false
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          description: Filter by booking status
          required: false
          schema:
            type: string
            enum:
              - signup
              - waiting_list
              - cancelled
      responses:
        '200':
          description: Member bookings retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Member bookings retrieved successfully
                  data:
                    type: object
                    properties:
                      bookings:
                        type: array
                        items:
                          $ref: '#/components/schemas/BookingResponse'
                      pagination:
                        $ref: '#/components/schemas/PaginationResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /api/booking/admin/statistics:
    get:
      tags:
        - Booking Management
      summary: Get booking statistics
      description: Get booking statistics for admin dashboard
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Booking statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking statistics retrieved successfully
                  data:
                    type: object
                    properties:
                      total_bookings:
                        type: integer
                        description: Total number of bookings
                        example: 150
                      active_bookings:
                        type: integer
                        description: Number of active bookings
                        example: 120
                      cancelled_bookings:
                        type: integer
                        description: Number of cancelled bookings
                        example: 30
                      waitlist_bookings:
                        type: integer
                        description: Number of waitlist bookings
                        example: 15
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member-package/my-packages:
    get:
      tags:
        - Member Package Management
      summary: Get user's packages
      description: |
        Retrieve user's current active package and package purchase history.
        Includes progress tracking for sessions used vs total sessions available.

        **Session Usage Calculation:**
        - Used sessions: Count from booking table with status 'signup'
        - Total sessions: Based on package type and related tables
        - Progress: (used_sessions / total_sessions) * 100

        **Package Types Supported:**
        - membership: Uses package_membership.session
        - first_trial: Uses package_first_trial.group_session + private_session
        - promo: Uses package_promo.group_session + private_session
        - bonus: Uses package_bonus.group_session + private_session

        **Active Package Logic:**
        - end_date >= today AND payment_status = 'paid'
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Packages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: My packages retrieved successfully
                  data:
                    type: object
                    properties:
                      current_active_package:
                        type: object
                        nullable: true
                        description: Currently active package (end_date >= today and payment_status = 'paid')
                        properties:
                          package_name:
                            type: string
                            example: 30 Session Group
                            description: Name of the active package
                          validity_until:
                            type: string
                            format: date
                            example: '2025-08-26'
                            description: Package expiration date
                          session_group_classes:
                            type: object
                            description: Group session tracking information
                            properties:
                              used:
                                type: integer
                                example: 5
                                description: Number of sessions used (from booking table with status 'signup')
                              total:
                                type: integer
                                example: 30
                                description: Total sessions available in package
                              remaining:
                                type: integer
                                example: 25
                                description: Remaining sessions available
                              progress_percentage:
                                type: integer
                                example: 17
                                description: Progress percentage (used/total * 100)
                          session_private_classes:
                            type: object
                            description: Private session tracking information (currently not implemented)
                            properties:
                              used:
                                type: integer
                                example: 0
                              total:
                                type: integer
                                example: 0
                              remaining:
                                type: integer
                                example: 0
                              progress_percentage:
                                type: integer
                                example: 0
                      package_history:
                        type: array
                        description: List of all purchased packages (payment_status = 'paid')
                        items:
                          type: object
                          properties:
                            'no':
                              type: integer
                              example: 1
                              description: Sequential number for display
                            invoice_number:
                              type: string
                              example: ORD-1753528601660-943
                              description: Order number used as invoice number
                            payment_date:
                              type: string
                              format: date-time
                              example: '2025-07-26T11:17:04.000Z'
                              description: Date when payment was completed
                            expired_date:
                              type: string
                              format: date
                              example: '2025-07-26'
                              description: Package expiration date
                            package_name:
                              type: string
                              example: 30 Session Group
                              description: Name of the package
                            session_count:
                              type: integer
                              example: 30
                              description: Total sessions included in this package
                            price:
                              type: string
                              example: '630000.00'
                              description: Package price in decimal format
                            order_id:
                              type: string
                              format: uuid
                              example: 5cf2d916-561a-4844-9b5c-53c7f6795112
                              description: Order ID for reference
        '401':
          description: Unauthorized - Token not provided or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Only members can view packages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /test/twilio/status:
    get:
      tags:
        - Test & Development
      summary: Get Twilio configuration status
      description: |
        Check the status of Twilio configuration including account credentials
        and WhatsApp setup. Admin only endpoint.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Twilio configuration status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Twilio configuration status
                  data:
                    type: object
                    properties:
                      account_sid:
                        type: string
                        example: ✅ Configured
                      auth_token:
                        type: string
                        example: ✅ Configured
                      whatsapp_number:
                        type: string
                        example: ❌ Missing (using sandbox)
                      environment:
                        type: string
                        example: development
                      sandbox_mode:
                        type: boolean
                        example: true
        '401':
          description: Unauthorized - Token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /test/twilio/whatsapp:
    post:
      tags:
        - Test & Development
      summary: Test WhatsApp message sending
      description: |
        Send a test WhatsApp message using Twilio. Admin only endpoint.

        **Requirements for WhatsApp:**
        - Phone number must be in international format
        - For sandbox mode, recipient must join the sandbox first
        - Message length max 1600 characters

        **Sandbox Setup:**
        1. Send "join {{sandbox_keyword}}" to +1 415 523 8886
        2. Wait for confirmation message
        3. Now you can test sending messages
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - message
              properties:
                phone_number:
                  type: string
                  description: Phone number in international format (with or without +)
                  example: '+6281234567890'
                message:
                  type: string
                  description: Message content to send
                  maxLength: 1600
                  example: Hello! This is a test message from Oblix Pilates API.
      responses:
        '200':
          description: WhatsApp message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Pesan WhatsApp berhasil dikirim
                  data:
                    type: object
                    properties:
                      message_id:
                        type: string
                        example: SM1234567890abcdef1234567890abcdef
                      status:
                        type: string
                        example: queued
                      to:
                        type: string
                        example: '+6281234567890'
        '400':
          description: Bad request - Validation error or message failed to send
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Gagal mengirim pesan WhatsApp
                  error:
                    type: string
                    example: Phone number is not a valid WhatsApp number
        '401':
          description: Unauthorized - Token required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin access required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /class:
    get:
      tags:
        - Class
      summary: Get all classes
      description: Mengambil daftar semua kelas dengan pagination dan search
      security:
        - BearerAuth: []
      parameters:
        - name: search
          in: query
          description: Search kelas berdasarkan nama
          required: false
          schema:
            type: string
            minLength: 1
            maxLength: 100
        - name: page
          in: query
          description: Nomor halaman
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: Jumlah item per halaman
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Classes retrieved successfully
                  data:
                    type: object
                    properties:
                      classes:
                        type: array
                        items:
                          $ref: '#/components/schemas/Class'
                      pagination:
                        $ref: '#/components/schemas/Pagination'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Class
      summary: Create new class
      description: Membuat kelas baru (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - class_name
                - color_sign
              properties:
                class_name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  description: Nama kelas
                  example: Pilates Mat
                color_sign:
                  type: string
                  pattern: ^#[0-9A-F]{6}$
                  description: Warna untuk identifikasi kelas (hex color)
                  example: '#FF6B6B'
      responses:
        '201':
          description: Class created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Class created successfully
                  data:
                    $ref: '#/components/schemas/Class'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Class name already exists
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /class/select:
    get:
      tags:
        - Class
      summary: Get classes for select/dropdown
      description: Mengambil daftar kelas untuk dropdown/select (tidak perlu auth)
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Classes retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          format: uuid
                          example: 550e8400-e29b-41d4-a716-446655440000
                        class_name:
                          type: string
                          example: Pilates Mat
                        color_sign:
                          type: string
                          example: '#FF6B6B'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /class/{id}:
    get:
      tags:
        - Class
      summary: Get class by ID
      description: Mengambil detail kelas berdasarkan ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Class retrieved successfully
                  data:
                    $ref: '#/components/schemas/Class'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      tags:
        - Class
      summary: Update class
      description: Mengupdate kelas berdasarkan ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                class_name:
                  type: string
                  minLength: 2
                  maxLength: 100
                  description: Nama kelas
                  example: Pilates Mat Advanced
                color_sign:
                  type: string
                  pattern: ^#[0-9A-F]{6}$
                  description: Warna untuk identifikasi kelas (hex color)
                  example: '#4ECDC4'
      responses:
        '200':
          description: Class updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Class updated successfully
                  data:
                    $ref: '#/components/schemas/Class'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Class name already exists
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Class
      summary: Delete class
      description: Menghapus kelas berdasarkan ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Class ID
          schema:
            type: string
            format: uuid
            example: 550e8400-e29b-41d4-a716-446655440000
      responses:
        '200':
          description: Class deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Class deleted successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: error
                  message:
                    type: string
                    example: Cannot delete class. It is being used in 5 schedule(s)
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
  /member:
    get:
      tags:
        - Member Management
      summary: Get all members
      description: Retrieve all members with pagination and search functionality (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number for pagination
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items per page
        - in: query
          name: search
          schema:
            type: string
          description: Search term for member name, username, member code, or phone number
        - in: query
          name: status
          schema:
            type: string
            enum:
              - active
              - inactive
          description: Filter by member status
      responses:
        '200':
          description: Members retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          members:
                            type: array
                            items:
                              $ref: '#/components/schemas/Member'
                          pagination:
                            $ref: '#/components/schemas/PaginationResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Member Management
      summary: Create new member
      description: Create a new member (Admin only)
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMemberRequest'
      responses:
        '201':
          description: Member created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Validation error or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /member/stats:
    get:
      tags:
        - Member Management
      summary: Get member statistics
      description: Get member statistics including total, active, inactive, and new members this month (Admin only)
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Member statistics retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MemberStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /member/{id}:
    get:
      tags:
        - Member Management
      summary: Get member by ID
      description: Retrieve a specific member by their ID (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Member ID
      responses:
        '200':
          description: Member retrieved successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Member Management
      summary: Update member
      description: Update an existing member's information (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Member ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMemberRequest'
      responses:
        '200':
          description: Member updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '400':
          description: Validation error or user with same username/email exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Member Management
      summary: Delete member
      description: Delete a member and their associated user account (Admin only)
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Member ID
      responses:
        '200':
          description: Member deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Member not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /member/my-classes:
    get:
      tags:
        - Member Management
      summary: Get member's classes by type
      description: Get member's classes filtered by type (upcoming, waitlist, post, cancelled)
      security:
        - BearerAuth: []
      parameters:
        - name: type
          in: query
          description: Type of classes to retrieve
          required: false
          schema:
            type: string
            enum:
              - upcoming
              - waitlist
              - post
              - cancelled
            default: upcoming
      responses:
        '200':
          description: My classes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: My upcoming classes retrieved successfully
                  data:
                    type: object
                    properties:
                      type:
                        type: string
                        example: upcoming
                      total_classes:
                        type: integer
                        example: 3
                      classes:
                        type: array
                        items:
                          type: object
                          properties:
                            'no':
                              type: integer
                              example: 1
                            booking_id:
                              type: string
                              format: uuid
                              example: 6b8f4d2e-1a3c-4e8b-9d7f-2c5a8e1b4f9d
                            class_date:
                              type: string
                              format: date
                              example: '2025-07-29'
                            time:
                              type: string
                              example: 07:30:00 - 08:30:00
                            course:
                              type: string
                              example: Beginner Pilates
                            coach:
                              type: string
                              example: Coach Lauren
                            spot:
                              type: string
                              example: 9/10
                            status:
                              type: string
                              enum:
                                - signup
                                - waiting_list
                                - cancelled
                              example: signup
                            schedule_id:
                              type: string
                              format: uuid
                            class_id:
                              type: string
                              format: uuid
                            trainer_id:
                              type: string
                              format: uuid
                            notes:
                              type: string
                              nullable: true
                            created_at:
                              type: string
                              format: date-time
                            updated_at:
                              type: string
                              format: date-time
                      additional_info:
                        type: object
                        nullable: true
                        properties:
                          message:
                            type: string
                            example: >-
                              If you're waitlisted, you'll be automatically added up to 120 mins before class if there's
                              space—we'll notify you either way.
        '400':
          $ref: ./base.yaml#/components/responses/BadRequest
        '401':
          $ref: ./base.yaml#/components/responses/Unauthorized
        '404':
          $ref: ./base.yaml#/components/responses/NotFound
        '500':
          $ref: ./base.yaml#/components/responses/InternalServerError
  /member/my-classes/{booking_id}/cancel:
    put:
      tags:
        - Member Management
      summary: Cancel a booking
      description: Cancel a specific booking for the authenticated member
      security:
        - BearerAuth: []
      parameters:
        - name: booking_id
          in: path
          description: Booking ID to cancel
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Booking cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking cancelled successfully
                  data:
                    type: object
                    properties:
                      booking_id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        example: cancelled
                      cancelled_at:
                        type: string
                        format: date-time
        '400':
          description: Cannot cancel booking
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Cannot cancel booking. Cancellation deadline was 120 minutes before class.
                  data:
                    type: object
                    properties:
                      schedule_time:
                        type: string
                        format: date-time
                      cancel_deadline:
                        type: string
                        format: date-time
                      current_time:
                        type: string
                        format: date-time
        '401':
          $ref: ./base.yaml#/components/responses/Unauthorized
        '404':
          $ref: ./base.yaml#/components/responses/NotFound
        '500':
          $ref: ./base.yaml#/components/responses/InternalServerError
  /member/my-classes/{booking_id}/details:
    get:
      tags:
        - Member Management
      summary: Get booking details
      description: Get detailed information about a specific booking
      security:
        - BearerAuth: []
      parameters:
        - name: booking_id
          in: path
          description: Booking ID to get details for
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Booking details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Booking details retrieved successfully
                  data:
                    type: object
                    properties:
                      booking_id:
                        type: string
                        format: uuid
                      status:
                        type: string
                        enum:
                          - signup
                          - waiting_list
                          - cancelled
                        example: signup
                      class_date:
                        type: string
                        format: date
                        example: '2025-07-29'
                      time:
                        type: string
                        example: 07:30:00 - 08:30:00
                      course:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string
                            example: Beginner Pilates
                          description:
                            type: string
                            nullable: true
                          color:
                            type: string
                            example: '#FF6B6B'
                      coach:
                        type: object
                        properties:
                          id:
                            type: string
                            format: uuid
                          name:
                            type: string
                            example: Coach Lauren
                          picture:
                            type: string
                            nullable: true
                          description:
                            type: string
                            nullable: true
                      schedule_type:
                        type: string
                        enum:
                          - group
                          - semi_private
                          - private
                        example: group
                      notes:
                        type: string
                        nullable: true
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        '401':
          $ref: ./base.yaml#/components/responses/Unauthorized
        '404':
          $ref: ./base.yaml#/components/responses/NotFound
        '500':
          $ref: ./base.yaml#/components/responses/InternalServerError
  /check-class:
    get:
      tags:
        - Check Class
      summary: Get available classes for a specific date with package priority
      description: |
        Mendapatkan jadwal kelas yang tersedia untuk tanggal tertentu beserta informasi paket member.

        **Logika Prioritas Paket:**
        - **Bonus Package** (Prioritas Tertinggi): Paket bonus yang diberikan secara gratis
        - **Promo Package**: Paket dengan harga khusus/promosi
        - **First Trial Package**: Paket trial untuk member baru
        - **Membership Package** (Prioritas Terendah): Paket reguler/berlangganan

        **Faktor Tambahan:**
        - Paket yang akan berakhir dalam 7 hari mendapat prioritas lebih tinggi
        - Jika tipe paket sama, paket dengan end_date lebih awal diprioritaskan
      security:
        - BearerAuth: []
      parameters:
        - name: date
          in: query
          required: true
          schema:
            type: string
            format: date
            example: '2025-07-28'
          description: Date to check available classes (YYYY-MM-DD format)
      responses:
        '200':
          description: Available classes retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Available classes retrieved successfully
                  data:
                    $ref: '#/components/schemas/CheckClassResponse'
        '400':
          description: Bad request - Invalid date format or missing date parameter
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized - Invalid or missing token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
tags:
  - name: Authentication
    description: User authentication and authorization endpoints
  - name: Content Management
    description: Banner, blog, FAQ, gallery, and testimonial management endpoints
  - name: Profile Management
    description: User profile management endpoints
  - name: Trainer Management
    description: Trainer management endpoints
  - name: Membership Package Management
    description: Membership package management endpoints
  - name: Trial Package Management
    description: Trial package management endpoints
  - name: Promo Package Management
    description: Promo package management endpoints
  - name: Bonus Package Management
    description: Bonus package management endpoints
  - name: Staff Management
    description: Staff management endpoints
  - name: Category Management
    description: Category management endpoints
  - name: Order Management
    description: Order and payment management endpoints
  - name: Payment
    description: Payment-related endpoints for Midtrans integration
  - name: Schedule Management
    description: Schedule management endpoints for group, semi-private, and private classes
  - name: Booking Management
    description: Booking management endpoints for group and semi-private schedules
  - name: Member Package Management
    description: Member package management and tracking endpoints
  - name: Class Management
    description: Class management endpoints
  - name: Member Management
    description: Member management endpoints
  - name: Check Class
    description: Check class endpoints
